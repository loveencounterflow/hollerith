(function() {
  'use strict';
  var SFMODULES, Type, Typespace, debug, hide, nameit, regex, rpr, set_getter, type_of;

  //===========================================================================================================
  SFMODULES = require('bricabrac-single-file-modules');

  ({type_of} = SFMODULES.unstable.require_type_of());

  ({
    show_no_colors: rpr
  } = SFMODULES.unstable.require_show());

  ({debug} = console);

  ({regex} = require('regex'));

  ({hide, set_getter} = SFMODULES.require_managed_property_tools());

  ({nameit} = SFMODULES.require_nameit());

  //===========================================================================================================
  Type = class Type {
    //---------------------------------------------------------------------------------------------------------
    constructor(typespace, name, isa) {
      hide(this, 'name', name);
      hide(this, 'T', typespace);
      hide(this, '_isa', isa);
      hide(this, '_ctx', Object.create(typespace));
      this._ctx.me = this;
      this.data = {};
      return void 0;
    }

    //---------------------------------------------------------------------------------------------------------
    isa(...P) {
      return this._isa.call(this._ctx, ...P);
    }

  };

  //===========================================================================================================
  Typespace = class Typespace {
    //---------------------------------------------------------------------------------------------------------
    constructor() {
      var Typeclass, clasz, i, isa, len, name, ref;
      clasz = this.constructor;
      ref = Object.getOwnPropertyNames(clasz);
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        Typeclass = class Typeclass extends Type {};
        nameit(name, Typeclass);
        this[name] = new Typeclass(this, name, isa = clasz[name]);
      }
      return void 0;
    }

    //=========================================================================================================
    static text(x) {
      return (type_of(x)) === 'text';
    }

    static nonempty_text(x) {
      return (this.text.isa(x)) && x.length > 0;
    }

    static float(x) {
      return Number.isFinite(x);
    }

    static integer(x) {
      return Number.isSafeInteger(x);
    }

    static pinteger(x) {
      return (this.integer.isa(x)) && x > 0;
    }

    static zpinteger(x) {
      return (this.integer.isa(x)) && x >= 0;
    }

    static cardinal(x) {
      return this.zpinteger.isa(x);
    }

    //---------------------------------------------------------------------------------------------------------
    static moninc_chrs(x) {
      var chr, chrs, i, idx, len, prv_chr;
      if (!this.nonempty_text(x)) {
        return false;
      }
      this.data.chrs = chrs = Array.split(x);
      prv_chr = null;
      for (idx = i = 0, len = chrs.length; i < len; idx = ++i) {
        chr = chrs[idx];
        if (prv_chr == null) {
          continue;
        }
        if (!(prv_chr < chr)) {
          return false;
        }
        prv_chr = chr;
      }
      return true;
    }

    //---------------------------------------------------------------------------------------------------------
    static dimension(x) {
      return this.pinteger.isa(x);
    }

    //---------------------------------------------------------------------------------------------------------
    static nmag_bare_reversed(x) {
      if (!this.nonempty_text(x)) {
        return false;
      }
    }

    //---------------------------------------------------------------------------------------------------------
    static pmag_bare(x) {}

    //---------------------------------------------------------------------------------------------------------
    static magnifiers(x) {
      var nmag, nmag_bare_reversed, pmag, pmag_bare;
      if (!this.nonempty_text.isa(x)) {
        return false;
      }
      [nmag_bare_reversed, pmag_bare] = x.split(/\s+/);
      if (!this.nmag_bare_reversed(nmag_bare_reversed)) {
        return false;
      }
      if (!this.pmag_bare(pmag_bare)) {
        return false;
      }
      nmag = ' ' + nmag_bare_reversed.reverse();
      return pmag = ' ' + pmag_bare;
    }

  };

  //===========================================================================================================
  module.exports = {
    types: new Typespace(),
    internals: {Type, Typespace}
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3R5cGVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUFBO0FBQUEsTUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLFNBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLFVBQUEsRUFBQSxPQUFBOzs7RUFHQSxTQUFBLEdBQTRCLE9BQUEsQ0FBUSwrQkFBUjs7RUFDNUIsQ0FBQSxDQUFFLE9BQUYsQ0FBQSxHQUE0QixTQUFTLENBQUMsUUFBUSxDQUFDLGVBQW5CLENBQUEsQ0FBNUI7O0VBQ0EsQ0FBQTtJQUFFLGNBQUEsRUFBZ0I7RUFBbEIsQ0FBQSxHQUE0QixTQUFTLENBQUMsUUFBUSxDQUFDLFlBQW5CLENBQUEsQ0FBNUI7O0VBQ0EsQ0FBQSxDQUFFLEtBQUYsQ0FBQSxHQUE0QixPQUE1Qjs7RUFDQSxDQUFBLENBQUUsS0FBRixDQUFBLEdBQTRCLE9BQUEsQ0FBUSxPQUFSLENBQTVCOztFQUNBLENBQUEsQ0FBRSxJQUFGLEVBQ0UsVUFERixDQUFBLEdBQzRCLFNBQVMsQ0FBQyw4QkFBVixDQUFBLENBRDVCOztFQUVBLENBQUEsQ0FBRSxNQUFGLENBQUEsR0FBNEIsU0FBUyxDQUFDLGNBQVYsQ0FBQSxDQUE1QixFQVZBOzs7RUFjTSxPQUFOLE1BQUEsS0FBQSxDQUFBOztJQUdFLFdBQWEsQ0FBRSxTQUFGLEVBQWEsSUFBYixFQUFtQixHQUFuQixDQUFBO01BQ1gsSUFBQSxDQUFLLElBQUwsRUFBUSxNQUFSLEVBQWtCLElBQWxCO01BQ0EsSUFBQSxDQUFLLElBQUwsRUFBUSxHQUFSLEVBQWtCLFNBQWxCO01BQ0EsSUFBQSxDQUFLLElBQUwsRUFBUSxNQUFSLEVBQWtCLEdBQWxCO01BQ0EsSUFBQSxDQUFLLElBQUwsRUFBUSxNQUFSLEVBQWtCLE1BQU0sQ0FBQyxNQUFQLENBQWMsU0FBZCxDQUFsQjtNQUNBLElBQUMsQ0FB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LENBcENkOzs7SUF1Q2UsT0FBWixVQUFZLENBQUUsQ0FBRixDQUFBO0FBQ2YsVUFBQSxJQUFBLEVBQUEsa0JBQUEsRUFBQSxJQUFBLEVBQUE7TUFBSSxLQUFvQixJQUFDLENBQUEsYUFBYSxDQUFDLEdBQWYsQ0FBbUIsQ0FBbkIsQ0FBcEI7QUFBQSxlQUFPLE1BQVA7O01BQ0EsQ0FBRSxrQkFBRixFQUNFLFNBREYsQ0FBQSxHQUNrQixDQUFDLENBQUMsS0FBRixDQUFRLEtBQVI7TUFDbEIsS0FBb0IsSUFBQyxDQUFBLGtCQUFELENBQXFCLGtCQUFyQixDQUFwQjtBQUFBLGVBQU8sTUFBUDs7TUFDQSxLQUFvQixJQUFDLENBQUEsU0FBRCxDQUFxQixTQUFyQixDQUFwQjtBQUFBLGVBQU8sTUFBUDs7TUFDQSxJQUFBLEdBQWtCLEdBQUEsR0FBTSxrQkFBa0IsQ0FBQyxPQUFuQixDQUFBO2FBQ3hCLElBQUEsR0FBa0IsR0FBQSxHQUFNO0lBUGI7O0VBekNmLEVBL0JBOzs7RUFtRkEsTUFBTSxDQUFDLE9BQVAsR0FBaUI7SUFBRSxLQUFBLEVBQU8sSUFBSSxTQUFKLENBQUEsQ0FBVDtJQUEwQixTQUFBLEVBQVcsQ0FBRSxJQUFGLEVBQVEsU0FBUjtFQUFyQztBQW5GakIiLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc3RyaWN0J1xuXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblNGTU9EVUxFUyAgICAgICAgICAgICAgICAgPSByZXF1aXJlICdicmljYWJyYWMtc2luZ2xlLWZpbGUtbW9kdWxlcydcbnsgdHlwZV9vZiwgICAgICAgICAgICAgIH0gPSBTRk1PRFVMRVMudW5zdGFibGUucmVxdWlyZV90eXBlX29mKClcbnsgc2hvd19ub19jb2xvcnM6IHJwciwgIH0gPSBTRk1PRFVMRVMudW5zdGFibGUucmVxdWlyZV9zaG93KClcbnsgZGVidWcsICAgICAgICAgICAgICAgIH0gPSBjb25zb2xlXG57IHJlZ2V4LCAgICAgICAgICAgICAgICB9ID0gcmVxdWlyZSAncmVnZXgnXG57IGhpZGUsXG4gIHNldF9nZXR0ZXIsICAgICAgICAgICB9ID0gU0ZNT0RVTEVTLnJlcXVpcmVfbWFuYWdlZF9wcm9wZXJ0eV90b29scygpXG57IG5hbWVpdCwgICAgICAgICAgICAgICB9ID0gU0ZNT0RVTEVTLnJlcXVpcmVfbmFtZWl0KClcblxuXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIFR5cGVcblxuICAjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGNvbnN0cnVjdG9yOiAoIHR5cGVzcGFjZSwgbmFtZSwgaXNhICkgLT5cbiAgICBoaWRlIEAsICduYW1lJywgICBuYW1lXG4gICAgaGlkZSBALCAnVCcsICAgICAgdHlwZXNwYWNlXG4gICAgaGlkZSBALCAnX2lzYScsICAgaXNhXG4gICAgaGlkZSBALCAnX2N0eCcsICAgT2JqZWN0LmNyZWF0ZSB0eXBlc3BhY2VcbiAgICBAX2N0eC5tZSAgICAgICAgPSBAXG4gICAgQGRhdGEgICAgICAgICAgID0ge31cbiAgICByZXR1cm4gdW5kZWZpbmVkXG5cbiAgIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBpc2E6ICggUC4uLiApIC0+IEBfaXNhLmNhbGwgQF9jdHgsIFAuLi5cblxuXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIFR5cGVzcGFjZVxuXG4gICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgY29uc3RydWN0b3I6IC0+XG4gICAgY2xhc3ogPSBAY29uc3RydWN0b3JcbiAgICBmb3IgbmFtZSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyBjbGFzelxuICAgICAgY2xhc3MgVHlwZWNsYXNzIGV4dGVuZHMgVHlwZVxuICAgICAgbmFtZWl0IG5hbWUsIFR5cGVjbGFzc1xuICAgICAgQFsgbmFtZSBdID0gbmV3IFR5cGVjbGFzcyBALCBuYW1lLCBpc2EgPSBjbGFzelsgbmFtZSBdXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuXG4gICM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgQHRleHQ6ICAgICAgICAgICAoIHggKSAtPiAoIHR5cGVfb2YgeCApIGlzICd0ZXh0J1xuICBAbm9uZW1wdHlfdGV4dDogICggeCApIC0+ICggQHRleHQuaXNhIHggKSBhbmQgeC5sZW5ndGggPiAwXG4gIEBmbG9hdDogICAgICAgICAgKCB4ICkgLT4gTnVtYmVyLmlzRmluaXRlIHhcbiAgQGludGVnZXI6ICAgICAgICAoIHggKSAtPiBOdW1iZXIuaXNTYWZlSW50ZWdlciB4XG4gIEBwaW50ZWdlcjogICAgICAgKCB4ICkgLT4gKCBAaW50ZWdlci5pc2EgeCApIGFuZCB4ID4gMFxuICBAenBpbnRlZ2VyOiAgICAgICggeCApIC0+ICggQGludGVnZXIuaXNhIHggKSBhbmQgeCA+PSAwXG4gIEBjYXJkaW5hbDogICAgICAgKCB4ICkgLT4gQHpwaW50ZWdlci5pc2EgeFxuXG4gICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgQG1vbmluY19jaHJzOiAoIHggKSAtPlxuICAgIHJldHVybiBmYWxzZSB1bmxlc3MgQG5vbmVtcHR5X3RleHQgeFxuICAgIEBkYXRhLmNocnMgPSBjaHJzID0gQXJyYXkuc3BsaXQgeFxuICAgIHBydl9jaHIgICAgPSBudWxsXG4gICAgZm9yIGNociwgaWR4IGluIGNocnNcbiAgICAgIGNvbnRpbnVlIHVubGVzcyBwcnZfY2hyP1xuICAgICAgcmV0dXJuIGZhbHNlIHVubGVzcyBwcnZfY2hyIDwgY2hyXG4gICAgICBwcnZfY2hyID0gY2hyXG4gICAgcmV0dXJuIHRydWVcblxuICAjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIEBkaW1lbnNpb246ICAgICAgKCB4ICkgLT4gQHBpbnRlZ2VyLmlzYSAgeFxuXG4gICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgQG5tYWdfYmFyZV9yZXZlcnNlZDogKCB4ICkgLT5cbiAgICByZXR1cm4gZmFsc2UgdW5sZXNzIEBub25lbXB0eV90ZXh0IHhcbiAgIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBAcG1hZ19iYXJlOiAoIHggKSAtPlxuXG4gICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgQG1hZ25pZmllcnM6ICggeCApIC0+XG4gICAgcmV0dXJuIGZhbHNlIHVubGVzcyBAbm9uZW1wdHlfdGV4dC5pc2EgeFxuICAgIFsgbm1hZ19iYXJlX3JldmVyc2VkLFxuICAgICAgcG1hZ19iYXJlLCAgXSA9IHguc3BsaXQgL1xccysvXG4gICAgcmV0dXJuIGZhbHNlIHVubGVzcyBAbm1hZ19iYXJlX3JldmVyc2VkICBubWFnX2JhcmVfcmV2ZXJzZWRcbiAgICByZXR1cm4gZmFsc2UgdW5sZXNzIEBwbWFnX2JhcmUgICAgICAgICAgIHBtYWdfYmFyZVxuICAgIG5tYWcgICAgICAgICAgICA9ICcgJyArIG5tYWdfYmFyZV9yZXZlcnNlZC5yZXZlcnNlKClcbiAgICBwbWFnICAgICAgICAgICAgPSAnICcgKyBwbWFnX2JhcmVcblxuXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbm1vZHVsZS5leHBvcnRzID0geyB0eXBlczogbmV3IFR5cGVzcGFjZSgpLCBpbnRlcm5hbHM6IHsgVHlwZSwgVHlwZXNwYWNlLCB9LCB9XG4iXX0=
