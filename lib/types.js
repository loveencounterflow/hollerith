(function() {
  'use strict';
  var CFG, Hollerith_typespace, SFMODULES, Type, Typespace, _test_monotony, debug, freeze, get_max_integer, internals, is_positive_all_niner, is_positive_integer_power_of, regex, rpr, type_of;

  //===========================================================================================================
  SFMODULES = require('../../bricabrac-single-file-modules');

  ({type_of} = SFMODULES.unstable.require_type_of());

  ({
    show_no_colors: rpr
  } = SFMODULES.unstable.require_show());

  ({debug} = console);

  ({regex} = require('regex'));

  ({freeze} = Object);

  ({Type, Typespace, CFG} = SFMODULES.unstable.require_nanotypes());

  // get_max_niner_digit_count,
  // encode,
  // decode,
  // log_to_base,
  // get_required_digits,
  ({is_positive_integer_power_of, is_positive_all_niner, get_max_integer} = SFMODULES.unstable.require_anybase());

  //===========================================================================================================
  internals = Object.assign({Type, Typespace}, {
    //---------------------------------------------------------------------------------------------------------
    get_leading_novas_re: function(_nova) {
      return (regex('g'))` ^ ${_nova}* (?= .+ $ ) `;
    }
  });

  Hollerith_typespace = (function() {
    //===========================================================================================================
    // HOLLERITH TYPESPACE
    //===========================================================================================================
    class Hollerith_typespace extends Typespace {
      //---------------------------------------------------------------------------------------------------------
      constructor(cfg) {
        var blank_esc, blank_splitter;
        super(cfg);
        this.blank.validate(this[CFG].blank);
        blank_esc = RegExp.escape(this[CFG].blank);
        blank_splitter = new RegExp(`(?:${blank_esc})+`, 'gv');
        this[CFG] = freeze({...this[CFG], blank_splitter});
        return void 0;
      }

      //=========================================================================================================
      static text(x) {
        return (type_of(x)) === 'text';
      }

      static nonempty_text(x) {
        return (this.T.text.isa(x)) && (x.length > 0);
      }

      static character(x) {
        return (this.T.text.isa(x)) && (/^.$/v.test(x));
      }

      static float(x) {
        return Number.isFinite(x);
      }

      static integer(x) {
        return Number.isSafeInteger(x);
      }

      static pinteger(x) {
        return (this.T.integer.isa(x)) && (x > 0);
      }

      static zpinteger(x) {
        return (this.T.integer.isa(x)) && (x >= 0);
      }

      static cardinal(x) {
        return this.T.zpinteger.isa(x);
      }

      //---------------------------------------------------------------------------------------------------------
      /* NOTE requiring `x` to be both a character and equal to `@[CFG].blank` means `@[CFG].blank` itself can be tested */
      static blank(x) {
        return (this.T.character.isa(x)) && (x === this[CFG].blank);
      }

      // @blank_setting:   ( x ) -> ( @T.character.isa x )
      // @blank_usage:     ( x ) -> ( x is @[CFG].blank )
      static dimension(x) {
        return this.T.pinteger.isa(x);
      }

      static _base(x) {
        return (this.T.pinteger.isa(x)) && (x > 1);
      }

      static digits_numof(x) {
        return (this.T.pinteger.isa(x)) && (x > 1);
      }

      //---------------------------------------------------------------------------------------------------------
      static incremental_text(x) {
        if (!this.T.text.isa(x)) {
          return false;
        }
        this.assign({
          chrs: freeze(Array.from(x))
        });
        return _test_monotony.call(this, x, '<');
      }

      //---------------------------------------------------------------------------------------------------------
      static decremental_text(x) {
        if (!this.T.text.isa(x)) {
          return false;
        }
        this.assign({
          chrs: freeze(Array.from(x))
        });
        return _test_monotony.call(this, x, '>');
      }

      //---------------------------------------------------------------------------------------------------------
      static nmag_bare_reversed(x) {
        return this.T.incremental_text.dm_isa(this.data, null, x);
      }

      static pmag_bare(x) {
        return this.T.incremental_text.dm_isa(this.data, null, x);
      }

      //---------------------------------------------------------------------------------------------------------
      static magnifiers(x) {
        var _nmag_list, _pmag_list, nmag, nmag_bare_reversed, parts, pmag, pmag_bare;
        if (!this.T.nonempty_text.isa(x)) {
          return this.fail("expected a magnifier, got an empty text");
        }
        parts = x.split(this[CFG].blank_splitter);
        if (parts.length !== 2) {
          return this.fail(`magnifiers must have exactly 1 blank, got ${parts.length - 1} blanks`);
        }
        [nmag_bare_reversed, pmag_bare] = parts;
        if (!this.T.nmag_bare_reversed.dm_isa(this.data, {
          chrs: 'nmag_chrs_reversed'
        }, nmag_bare_reversed)) {
          //.......................................................................................................
          // @assign { iam: 'magnifiers', }; debug 'Ωbsk___1', @data
          return this.fail("Ωbsk___2 ???");
        }
        if (!this.T.pmag_bare.dm_isa(this.data, {
          chrs: '_pmag_list'
        }, pmag_bare)) {
          return this.fail("Ωbsk___3 ???");
        }
        if (!this.T.incremental_text.isa(nmag_bare_reversed + pmag_bare)) {
          return this.fail("Ωbsk___4 ???");
        }
        if (nmag_bare_reversed.length !== pmag_bare.length) {
          return this.fail("Ωbsk___5 ???");
        }
        //.......................................................................................................
        nmag = this[CFG].blank + [...this.data.nmag_chrs_reversed].reverse().join('');
        pmag = this[CFG].blank + pmag_bare;
        _nmag_list = freeze(Array.from(nmag));
        _pmag_list = freeze(Array.from(pmag));
        this.assign({nmag, pmag, _nmag_list, _pmag_list});
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      static digitset(x) {
        var _base, _leading_novas_re, _naught, _nova;
        if (!this.T.incremental_text.dm_isa(this.data, {
          chrs: '_digits_list'
        }, x)) {
          return false;
        }
        _base = this.data._digits_list.length;
        if (!this.T._base.isa(_base)) {
          return this.fail("an digitset must have 2 chrs or more");
        }
        _naught = this.data._digits_list.at(0);
        _nova = this.data._digits_list.at(-1);
        _leading_novas_re = internals.get_leading_novas_re(_nova);
        this.assign({_base, _naught, _nova, _leading_novas_re});
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      static uniliterals(x) {
        var _cipher, _nuns, _zpuns, nun_chrs, parts, puns, zpun_chrs;
        if (!this.T.nonempty_text.isa(x)) {
          return false;
        }
        if (this.T.character.isa(x)) {
          _nuns = '';
          _zpuns = x;
          nun_chrs = freeze([]);
          zpun_chrs = freeze([x]);
          this.assign({_nuns, _zpuns, nun_chrs, zpun_chrs});
          return true;
        }
        parts = x.split(this[CFG].blank_splitter);
        if (parts.length !== 3) {
          return this.fail(`uniliterals that are not a single character must have exactly 2 blank2, got ${parts.length - 1} blanks`);
        }
        [_nuns, _cipher, puns] = parts;
        _zpuns = _cipher + puns;
        this.assign({_nuns, _zpuns, _cipher});
        if (!this.T.incremental_text.dm_isa(this.data, {
          chrs: 'nun_chrs'
        }, _nuns)) {
          return false;
        }
        if (!this.T.incremental_text.dm_isa(this.data, {
          chrs: 'zpun_chrs'
        }, _zpuns)) {
          return false;
        }
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      static _alphabet(x) {
        if (!this.T.nonempty_text.dm_isa(this.data, null, x)) {
          return false;
        }
        if (!this.T.incremental_text.dm_isa(this.data, null, x)) {
          return false;
        }
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      static _max_integer_$(x, _base) {
        if (!this.T.pinteger.isa(x)) {
          return this.fail("x not a positive safe integer");
        }
        if (!this.T._base.isa(_base)) {
          return this.fail("_base not a safe integer greater than 1");
        }
        if (!is_positive_all_niner(x, _base)) {
          return this.fail("x not a positive all-niners");
        }
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      /* TAINT should be method of `T._max_integer_$` */
      create_max_integer_$({_base, digits_numof}) {
        var R;
        this._base.validate(_base);
        this.digits_numof.validate(digits_numof);
        R = Math.min(get_max_integer(Number.MAX_SAFE_INTEGER, _base), (_base ** digits_numof) - 1);
        this._max_integer_$.validate(R, _base);
        return R;
      }

      //---------------------------------------------------------------------------------------------------------
      static _max_digits_per_idx_$(x, _pmag_list) {
        if (!this.T.pinteger.isa(x)) {
          return this.fail("x not a positive safe integer");
        }
        if (!(x <= _pmag_list.length)) {
          return this.fail(`x ${x} exceeds limit set by magnifiers`);
        }
        return true;
      }

    };

    //=========================================================================================================
    Hollerith_typespace[CFG] = {
      blank: ' '
    };

    return Hollerith_typespace;

  }).call(this);

  //===========================================================================================================
  _test_monotony = function(x, cmp) {
    var R, chr, chrs, i, idx, prv_chr, ref;
    ({chrs} = this.data); // = @create data
    if (chrs.length === 0) {
      return this.fail("empty is not monotonic");
    }
    if (chrs.length === 1) {
      return true;
    }
    for (idx = i = 1, ref = chrs.length; (1 <= ref ? i < ref : i > ref); idx = 1 <= ref ? ++i : --i) {
      prv_chr = chrs[idx - 1];
      chr = chrs[idx];
      R = (function() {
        switch (cmp) {
          case '>':
            return prv_chr > chr;
          case '<':
            return prv_chr < chr;
          default:
            throw new Error(`Ωbsk___6 (internal) expected '>' or '<', got ${rpr(cmp)}`);
        }
      })();
      if (R) {
        continue;
      }
      this.assign({
        fail: {x, idx, prv_chr, chr}
      });
      return false;
    }
    return true;
  };

  //===========================================================================================================
  Object.assign(module.exports, {
    Hollerith_typespace,
    CFG: CFG,
    internals
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3R5cGVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUFBO0FBQUEsTUFBQSxHQUFBLEVBQUEsbUJBQUEsRUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLFNBQUEsRUFBQSxjQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxlQUFBLEVBQUEsU0FBQSxFQUFBLHFCQUFBLEVBQUEsNEJBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUE7OztFQUdBLFNBQUEsR0FBNEIsT0FBQSxDQUFRLHFDQUFSOztFQUM1QixDQUFBLENBQUUsT0FBRixDQUFBLEdBQTRCLFNBQVMsQ0FBQyxRQUFRLENBQUMsZUFBbkIsQ0FBQSxDQUE1Qjs7RUFDQSxDQUFBO0lBQUUsY0FBQSxFQUFnQjtFQUFsQixDQUFBLEdBQTRCLFNBQVMsQ0FBQyxRQUFRLENBQUMsWUFBbkIsQ0FBQSxDQUE1Qjs7RUFDQSxDQUFBLENBQUUsS0FBRixDQUFBLEdBQTRCLE9BQTVCOztFQUNBLENBQUEsQ0FBRSxLQUFGLENBQUEsR0FBNEIsT0FBQSxDQUFRLE9BQVIsQ0FBNUI7O0VBQ0EsQ0FBQSxDQUFFLE1BQUYsQ0FBQSxHQUE0QixNQUE1Qjs7RUFDQSxDQUFBLENBQUUsSUFBRixFQUNFLFNBREYsRUFFRSxHQUZGLENBQUEsR0FFNEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxpQkFBbkIsQ0FBQSxDQUY1QixFQVRBOzs7Ozs7O0VBWUEsQ0FBQSxDQUFFLDRCQUFGLEVBQ0UscUJBREYsRUFFRSxlQUZGLENBQUEsR0FRNEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxlQUFuQixDQUFBLENBUjVCLEVBWkE7OztFQXdCQSxTQUFBLEdBQVksTUFBTSxDQUFDLE1BQVAsQ0FBYyxDQUFFLElBQUYsRUFBUSxTQUFSLENBQWQsRUFHVixDQUFBOztJQUFBLG9CQUFBLEVBQXNCLFFBQUEsQ0FBRSxLQUFGLENBQUE7YUFBYSxDQUFFLEtBQUEs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Y0FBQSxHQUFpQixRQUFBLENBQUUsQ0FBRixFQUFLLEdBQUwsQ0FBQTtBQUNqQixRQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBO0lBQUUsQ0FBQSxDQUFFLElBQUYsQ0FBQSxHQUFZLElBQUMsQ0FBQSxJQUFiLEVBQUY7SUFDRSxJQUE2QyxJQUFJLENBQUMsTUFBTCxLQUFlLENBQTVEO0FBQUEsYUFBUyxJQUFDLENBQUEsSUFBRCxDQUFNLHdCQUFOLEVBQVQ7O0lBQ0EsSUFBNkMsSUFBSSxDQUFDLE1BQUwsS0FBZSxDQUE1RDtBQUFBLGFBQU8sS0FBUDs7SUFDQSxLQUFXLDBGQUFYO01BQ0UsT0FBQSxHQUFVLElBQUksQ0FBRSxHQUFBLEdBQU0sQ0FBUjtNQUNkLEdBQUEsR0FBVSxJQUFJLENBQUUsR0FBRjtNQUNkLENBQUE7QUFBVSxnQkFBTyxHQUFQO0FBQUEsZUFDSCxHQURHO21CQUNNLE9BQUEsR0FBVTtBQURoQixlQUVILEdBRkc7bUJBRU0sT0FBQSxHQUFVO0FBRmhCO1lBR0gsTUFBTSxJQUFJLEtBQUosQ0FBVSxDQUFBLDZDQUFBLENBQUEsQ0FBZ0QsR0FBQSxDQUFJLEdBQUosQ0FBaEQsQ0FBQSxDQUFWO0FBSEg7O01BSVYsSUFBWSxDQUFaO0FBQUEsaUJBQUE7O01BQ0EsSUFBQyxDQUFBLE1BQUQsQ0FBUTtRQUFFLElBQUEsRUFBTSxDQUFFLENBQUYsRUFBSyxHQUFMLEVBQVUsT0FBVixFQUFtQixHQUFuQjtNQUFSLENBQVI7QUFDQSxhQUFPO0lBVFQ7QUFVQSxXQUFPO0VBZFEsRUF4S2pCOzs7RUF5TEEsTUFBTSxDQUFDLE1BQVAsQ0FBYyxNQUFNLENBQUMsT0FBckIsRUFBOEI7SUFDNUIsbUJBRDRCO0lBRTVCLEdBQUEsRUFBc0IsR0FGTTtJQUc1QjtFQUg0QixDQUE5QjtBQXpMQSIsInNvdXJjZXNDb250ZW50IjpbIlxuJ3VzZSBzdHJpY3QnXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuU0ZNT0RVTEVTICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJy4uLy4uL2JyaWNhYnJhYy1zaW5nbGUtZmlsZS1tb2R1bGVzJ1xueyB0eXBlX29mLCAgICAgICAgICAgICAgfSA9IFNGTU9EVUxFUy51bnN0YWJsZS5yZXF1aXJlX3R5cGVfb2YoKVxueyBzaG93X25vX2NvbG9yczogcnByLCAgfSA9IFNGTU9EVUxFUy51bnN0YWJsZS5yZXF1aXJlX3Nob3coKVxueyBkZWJ1ZywgICAgICAgICAgICAgICAgfSA9IGNvbnNvbGVcbnsgcmVnZXgsICAgICAgICAgICAgICAgIH0gPSByZXF1aXJlICdyZWdleCdcbnsgZnJlZXplLCAgICAgICAgICAgICAgIH0gPSBPYmplY3RcbnsgVHlwZSxcbiAgVHlwZXNwYWNlLFxuICBDRkcsICAgICAgICAgICAgICAgICAgfSA9IFNGTU9EVUxFUy51bnN0YWJsZS5yZXF1aXJlX25hbm90eXBlcygpXG57IGlzX3Bvc2l0aXZlX2ludGVnZXJfcG93ZXJfb2YsXG4gIGlzX3Bvc2l0aXZlX2FsbF9uaW5lcixcbiAgZ2V0X21heF9pbnRlZ2VyLFxuICAjIGdldF9tYXhfbmluZXJfZGlnaXRfY291bnQsXG4gICMgZW5jb2RlLFxuICAjIGRlY29kZSxcbiAgIyBsb2dfdG9fYmFzZSxcbiAgIyBnZXRfcmVxdWlyZWRfZGlnaXRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSA9IFNGTU9EVUxFUy51bnN0YWJsZS5yZXF1aXJlX2FueWJhc2UoKVxuXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuaW50ZXJuYWxzID0gT2JqZWN0LmFzc2lnbiB7IFR5cGUsIFR5cGVzcGFjZSwgfSxcblxuICAjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGdldF9sZWFkaW5nX25vdmFzX3JlOiAoIF9ub3ZhICkgLT4gKCByZWdleCAnZycgKVwiXCJcIiBeICN7X25vdmF9KiAoPz0gLisgJCApIFwiXCJcIlxuXG5cblxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jIEhPTExFUklUSCBUWVBFU1BBQ0VcbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgSG9sbGVyaXRoX3R5cGVzcGFjZSBleHRlbmRzIFR5cGVzcGFjZVxuXG4gICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgY29uc3RydWN0b3I6ICggY2ZnICkgLT5cbiAgICBzdXBlciBjZmdcbiAgICBAYmxhbmsudmFsaWRhdGUgQFtDRkddLmJsYW5rXG4gICAgYmxhbmtfZXNjICAgICAgID0gUmVnRXhwLmVzY2FwZSBAW0NGR10uYmxhbmtcbiAgICBibGFua19zcGxpdHRlciAgPSBuZXcgUmVnRXhwIFwiKD86I3tibGFua19lc2N9KStcIiwgJ2d2J1xuICAgIEBbQ0ZHXSAgICAgICAgICA9IGZyZWV6ZSB7IEBbQ0ZHXS4uLiwgYmxhbmtfc3BsaXR0ZXIsIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG5cblxuICAjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIEBbQ0ZHXTpcbiAgICBibGFuazogJyAnXG5cbiAgIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBAdGV4dDogICAgICAgICAgICAoIHggKSAtPiAoIHR5cGVfb2YgeCApIGlzICd0ZXh0J1xuICBAbm9uZW1wdHlfdGV4dDogICAoIHggKSAtPiAoIEBULnRleHQuaXNhIHggKSBhbmQgKCB4Lmxlbmd0aCA+IDAgKVxuICBAY2hhcmFjdGVyOiAgICAgICAoIHggKSAtPiAoIEBULnRleHQuaXNhIHggKSBhbmQgKCAvXi4kL3YudGVzdCB4IClcbiAgQGZsb2F0OiAgICAgICAgICAgKCB4ICkgLT4gTnVtYmVyLmlzRmluaXRlIHhcbiAgQGludGVnZXI6ICAgICAgICAgKCB4ICkgLT4gTnVtYmVyLmlzU2FmZUludGVnZXIgeFxuICBAcGludGVnZXI6ICAgICAgICAoIHggKSAtPiAoIEBULmludGVnZXIuaXNhIHggKSBhbmQgKCB4ID4gIDAgKVxuICBAenBpbnRlZ2VyOiAgICAgICAoIHggKSAtPiAoIEBULmludGVnZXIuaXNhIHggKSBhbmQgKCB4ID49IDAgKVxuICBAY2FyZGluYWw6ICAgICAgICAoIHggKSAtPiBAVC56cGludGVnZXIuaXNhIHhcbiAgIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAjIyMgTk9URSByZXF1aXJpbmcgYHhgIHRvIGJlIGJvdGggYSBjaGFyYWN0ZXIgYW5kIGVxdWFsIHRvIGBAW0NGR10uYmxhbmtgIG1lYW5zIGBAW0NGR10uYmxhbmtgIGl0c2VsZiBjYW4gYmUgdGVzdGVkICMjI1xuICBAYmxhbms6ICAgICAgICAgICAoIHggKSAtPiAoIEBULmNoYXJhY3Rlci5pc2EgeCApIGFuZCAoIHggaXMgQFtDRkddLmJsYW5rIClcbiAgIyBAYmxhbmtfc2V0dGluZzogICAoIHggKSAtPiAoIEBULmNoYXJhY3Rlci5pc2EgeCApXG4gICMgQGJsYW5rX3VzYWdlOiAgICAgKCB4ICkgLT4gKCB4IGlzIEBbQ0ZHXS5ibGFuayApXG4gIEBkaW1lbnNpb246ICAgICAgICggeCApIC0+ICggQFQucGludGVnZXIuaXNhIHggKVxuICBAX2Jhc2U6ICAgICAgICAgICAoIHggKSAtPiAoIEBULnBpbnRlZ2VyLmlzYSB4ICkgYW5kICggeCA+IDEgKVxuICBAZGlnaXRzX251bW9mOiAgICAoIHggKSAtPiAoIEBULnBpbnRlZ2VyLmlzYSB4ICkgYW5kICggeCA+IDEgKVxuXG4gICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgQGluY3JlbWVudGFsX3RleHQ6ICggeCApIC0+XG4gICAgcmV0dXJuIGZhbHNlIHVubGVzcyBAVC50ZXh0LmlzYSB4XG4gICAgQGFzc2lnbiB7IGNocnM6ICggZnJlZXplIEFycmF5LmZyb20geCApLCB9XG4gICAgcmV0dXJuIF90ZXN0X21vbm90b255LmNhbGwgQCwgeCwgJzwnXG5cbiAgIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBAZGVjcmVtZW50YWxfdGV4dDogKCB4ICkgLT5cbiAgICByZXR1cm4gZmFsc2UgdW5sZXNzIEBULnRleHQuaXNhIHhcbiAgICBAYXNzaWduIHsgY2hyczogKCBmcmVlemUgQXJyYXkuZnJvbSB4ICksIH1cbiAgICByZXR1cm4gX3Rlc3RfbW9ub3RvbnkuY2FsbCBALCB4LCAnPidcblxuICAjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIEBubWFnX2JhcmVfcmV2ZXJzZWQ6ICAoIHggKSAtPiBAVC5pbmNyZW1lbnRhbF90ZXh0LmRtX2lzYSBAZGF0YSwgbnVsbCwgeFxuICBAcG1hZ19iYXJlOiAgICAgICAgICAgKCB4ICkgLT4gQFQuaW5jcmVtZW50YWxfdGV4dC5kbV9pc2EgQGRhdGEsIG51bGwsIHhcblxuICAjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIEBtYWduaWZpZXJzOiAoIHggKSAtPlxuICAgIHJldHVybiAoIEBmYWlsIFwiZXhwZWN0ZWQgYSBtYWduaWZpZXIsIGdvdCBhbiBlbXB0eSB0ZXh0XCIgKSB1bmxlc3MgQFQubm9uZW1wdHlfdGV4dC5pc2EgeFxuICAgIHBhcnRzICAgICAgICAgICAgICAgICAgID0geC5zcGxpdCBAW0NGR10uYmxhbmtfc3BsaXR0ZXJcbiAgICB1bmxlc3MgcGFydHMubGVuZ3RoIGlzIDJcbiAgICAgIHJldHVybiAoIEBmYWlsIFwibWFnbmlmaWVycyBtdXN0IGhhdmUgZXhhY3RseSAxIGJsYW5rLCBnb3QgI3twYXJ0cy5sZW5ndGggLSAxfSBibGFua3NcIilcbiAgICBbIG5tYWdfYmFyZV9yZXZlcnNlZCxcbiAgICAgIHBtYWdfYmFyZSwgICAgICAgICAgXSA9IHBhcnRzXG4gICAgIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgICAjIEBhc3NpZ24geyBpYW06ICdtYWduaWZpZXJzJywgfTsgZGVidWcgJ86pYnNrX19fMScsIEBkYXRhXG4gICAgcmV0dXJuICggQGZhaWwgXCLOqWJza19fXzIgPz8/XCIgKSB1bmxlc3MgIEBULm5tYWdfYmFyZV9yZXZlcnNlZC5kbV9pc2EgQGRhdGEsIHsgY2hyczogJ25tYWdfY2hyc19yZXZlcnNlZCcsIH0sICBubWFnX2JhcmVfcmV2ZXJzZWRcbiAgICByZXR1cm4gKCBAZmFpbCBcIs6pYnNrX19fMyA/Pz9cIiApIHVubGVzcyAgQFQucG1hZ19iYXJlLmRtX2lzYSAgICAgICAgICBAZGF0YSwgeyBjaHJzOiAnX3BtYWdfbGlzdCcsIH0sICAgICAgICAgIHBtYWdfYmFyZVxuICAgIHJldHVybiAoIEBmYWlsIFwizqlic2tfX180ID8/P1wiICkgdW5sZXNzICBAVC5pbmNyZW1lbnRhbF90ZXh0LmlzYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm1hZ19iYXJlX3JldmVyc2VkICsgcG1hZ19iYXJlXG4gICAgcmV0dXJuICggQGZhaWwgXCLOqWJza19fXzUgPz8/XCIgKSB1bmxlc3MgIG5tYWdfYmFyZV9yZXZlcnNlZC5sZW5ndGggaXMgcG1hZ19iYXJlLmxlbmd0aFxuICAgICMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gICAgbm1hZyAgICAgICAgPSBAW0NGR10uYmxhbmsgKyBbIEBkYXRhLm5tYWdfY2hyc19yZXZlcnNlZC4uLiwgXS5yZXZlcnNlKCkuam9pbiAnJ1xuICAgIHBtYWcgICAgICAgID0gQFtDRkddLmJsYW5rICsgcG1hZ19iYXJlXG4gICAgX25tYWdfbGlzdCAgPSBmcmVlemUgQXJyYXkuZnJvbSBubWFnXG4gICAgX3BtYWdfbGlzdCAgPSBmcmVlemUgQXJyYXkuZnJvbSBwbWFnXG4gICAgQGFzc2lnbiB7IG5tYWcsIHBtYWcsIF9ubWFnX2xpc3QsIF9wbWFnX2xpc3QsIH1cbiAgICByZXR1cm4gdHJ1ZVxuXG4gICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgQGRpZ2l0c2V0OiAoIHggKSAtPlxuICAgIHJldHVybiBmYWxzZSB1bmxlc3MgQFQuaW5jcmVtZW50YWxfdGV4dC5kbV9pc2EgQGRhdGEsIHsgY2hyczogJ19kaWdpdHNfbGlzdCcsIH0sIHhcbiAgICBfYmFzZSAgICAgICAgICAgICA9IEBkYXRhLl9kaWdpdHNfbGlzdC5sZW5ndGhcbiAgICByZXR1cm4gQGZhaWwgXCJhbiBkaWdpdHNldCBtdXN0IGhhdmUgMiBjaHJzIG9yIG1vcmVcIiB1bmxlc3MgQFQuX2Jhc2UuaXNhIF9iYXNlXG4gICAgX25hdWdodCAgICAgICAgICAgPSBAZGF0YS5fZGlnaXRzX2xpc3QuYXQgIDBcbiAgICBfbm92YSAgICAgICAgICAgICA9IEBkYXRhLl9kaWdpdHNfbGlzdC5hdCAtMVxuICAgIF9sZWFkaW5nX25vdmFzX3JlID0gaW50ZXJuYWxzLmdldF9sZWFkaW5nX25vdmFzX3JlIF9ub3ZhXG4gICAgQGFzc2lnbiB7IF9iYXNlLCBfbmF1Z2h0LCBfbm92YSwgX2xlYWRpbmdfbm92YXNfcmUsIH1cbiAgICByZXR1cm4gdHJ1ZVxuXG4gICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgQHVuaWxpdGVyYWxzOiAoIHggKSAtPlxuICAgIHJldHVybiBmYWxzZSB1bmxlc3MgQFQubm9uZW1wdHlfdGV4dC5pc2EgeFxuICAgIGlmIEBULmNoYXJhY3Rlci5pc2EgeFxuICAgICAgX251bnMgICAgID0gJydcbiAgICAgIF96cHVucyAgICA9IHhcbiAgICAgIG51bl9jaHJzICA9IGZyZWV6ZSBbXVxuICAgICAgenB1bl9jaHJzID0gZnJlZXplIFsgeCwgXVxuICAgICAgQGFzc2lnbiB7IF9udW5zLCBfenB1bnMsIG51bl9jaHJzLCB6cHVuX2NocnMsIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgcGFydHMgPSB4LnNwbGl0IEBbQ0ZHXS5ibGFua19zcGxpdHRlclxuICAgIHVubGVzcyBwYXJ0cy5sZW5ndGggaXMgM1xuICAgICAgcmV0dXJuICggQGZhaWwgXCJ1bmlsaXRlcmFscyB0aGF0IGFyZSBub3QgYSBzaW5nbGUgY2hhcmFjdGVyIG11c3QgaGF2ZSBleGFjdGx5IDIgYmxhbmsyLCBnb3QgI3twYXJ0cy5sZW5ndGggLSAxfSBibGFua3NcIilcbiAgICBbIF9udW5zLFxuICAgICAgX2NpcGhlcixcbiAgICAgIHB1bnMsIF0gPSBwYXJ0c1xuICAgIF96cHVucyAgICAgPSBfY2lwaGVyICsgcHVuc1xuICAgIEBhc3NpZ24geyBfbnVucywgX3pwdW5zLCBfY2lwaGVyLCB9XG4gICAgcmV0dXJuIGZhbHNlIHVubGVzcyBAVC5pbmNyZW1lbnRhbF90ZXh0LmRtX2lzYSBAZGF0YSwgeyBjaHJzOiAnbnVuX2NocnMnLCB9LCAgX251bnNcbiAgICByZXR1cm4gZmFsc2UgdW5sZXNzIEBULmluY3JlbWVudGFsX3RleHQuZG1faXNhIEBkYXRhLCB7IGNocnM6ICd6cHVuX2NocnMnLCB9LCBfenB1bnNcbiAgICByZXR1cm4gdHJ1ZVxuXG4gICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgQF9hbHBoYWJldDogKCB4ICkgLT5cbiAgICByZXR1cm4gZmFsc2UgdW5sZXNzIEBULm5vbmVtcHR5X3RleHQuZG1faXNhICAgIEBkYXRhLCBudWxsLCB4XG4gICAgcmV0dXJuIGZhbHNlIHVubGVzcyBAVC5pbmNyZW1lbnRhbF90ZXh0LmRtX2lzYSBAZGF0YSwgbnVsbCwgeFxuICAgIHJldHVybiB0cnVlXG5cbiAgIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBAX21heF9pbnRlZ2VyXyQ6ICggeCwgX2Jhc2UgKSAtPlxuICAgIHJldHVybiBAZmFpbCBcInggbm90IGEgcG9zaXRpdmUgc2FmZSBpbnRlZ2VyXCIgICAgICAgICAgIHVubGVzcyBAVC5waW50ZWdlci5pc2EgICAgICAgIHhcbiAgICByZXR1cm4gQGZhaWwgXCJfYmFzZSBub3QgYSBzYWZlIGludGVnZXIgZ3JlYXRlciB0aGFuIDFcIiAgdW5sZXNzIEBULl9iYXNlLmlzYSAgICAgICAgICAgIF9iYXNlXG4gICAgcmV0dXJuIEBmYWlsIFwieCBub3QgYSBwb3NpdGl2ZSBhbGwtbmluZXJzXCIgICAgICAgICAgICAgdW5sZXNzIGlzX3Bvc2l0aXZlX2FsbF9uaW5lciAgeCwgX2Jhc2VcbiAgICByZXR1cm4gdHJ1ZVxuXG4gICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgIyMjIFRBSU5UIHNob3VsZCBiZSBtZXRob2Qgb2YgYFQuX21heF9pbnRlZ2VyXyRgICMjI1xuICBjcmVhdGVfbWF4X2ludGVnZXJfJDogKHsgX2Jhc2UsIGRpZ2l0c19udW1vZiwgfSkgLT5cbiAgICBAX2Jhc2UudmFsaWRhdGUgICAgICAgIF9iYXNlXG4gICAgQGRpZ2l0c19udW1vZi52YWxpZGF0ZSBkaWdpdHNfbnVtb2ZcbiAgICBSID0gTWF0aC5taW4gKCBnZXRfbWF4X2ludGVnZXIgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsIF9iYXNlICksICggKCBfYmFzZSAqKiBkaWdpdHNfbnVtb2YgKSAtIDEgKVxuICAgIEBfbWF4X2ludGVnZXJfJC52YWxpZGF0ZSBSLCBfYmFzZVxuICAgIHJldHVybiBSXG5cbiAgIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBAX21heF9kaWdpdHNfcGVyX2lkeF8kOiAoIHgsIF9wbWFnX2xpc3QgKSAtPlxuICAgIHJldHVybiBAZmFpbCBcInggbm90IGEgcG9zaXRpdmUgc2FmZSBpbnRlZ2VyXCIgICAgICAgICAgIHVubGVzcyBAVC5waW50ZWdlci5pc2EgeFxuICAgIHJldHVybiBAZmFpbCBcInggI3t4fSBleGNlZWRzIGxpbWl0IHNldCBieSBtYWduaWZpZXJzXCIgIHVubGVzcyB4IDw9IF9wbWFnX2xpc3QubGVuZ3RoXG4gICAgcmV0dXJuIHRydWVcblxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5fdGVzdF9tb25vdG9ueSA9ICggeCwgY21wICkgLT5cbiAgeyBjaHJzLCB9ID0gQGRhdGEgIyA9IEBjcmVhdGUgZGF0YVxuICByZXR1cm4gKCBAZmFpbCBcImVtcHR5IGlzIG5vdCBtb25vdG9uaWNcIiApIGlmIGNocnMubGVuZ3RoIGlzIDBcbiAgcmV0dXJuIHRydWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgY2hycy5sZW5ndGggaXMgMVxuICBmb3IgaWR4IGluIFsgMSAuLi4gY2hycy5sZW5ndGggXVxuICAgIHBydl9jaHIgPSBjaHJzWyBpZHggLSAxIF1cbiAgICBjaHIgICAgID0gY2hyc1sgaWR4ICAgICBdXG4gICAgUiAgICAgICA9IHN3aXRjaCBjbXBcbiAgICAgIHdoZW4gJz4nIHRoZW4gcHJ2X2NociA+IGNoclxuICAgICAgd2hlbiAnPCcgdGhlbiBwcnZfY2hyIDwgY2hyXG4gICAgICBlbHNlIHRocm93IG5ldyBFcnJvciBcIs6pYnNrX19fNiAoaW50ZXJuYWwpIGV4cGVjdGVkICc+JyBvciAnPCcsIGdvdCAje3JwciBjbXB9XCJcbiAgICBjb250aW51ZSBpZiBSXG4gICAgQGFzc2lnbiB7IGZhaWw6IHsgeCwgaWR4LCBwcnZfY2hyLCBjaHIsIH0sIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgcmV0dXJuIHRydWVcblxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5PYmplY3QuYXNzaWduIG1vZHVsZS5leHBvcnRzLCB7XG4gIEhvbGxlcml0aF90eXBlc3BhY2UsXG4gIENGRzogICAgICAgICAgICAgICAgICBDRkcsXG4gIGludGVybmFscywgfVxuIl19
