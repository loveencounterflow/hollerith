(function() {
  'use strict';
  var Bounded_list, Hollerith_typespace, SFMODULES, Type, Typespace, _test_monotony, clean_assign, debug, hide, nameit, omit, regex, remap, rpr, set_getter, type_of;

  //===========================================================================================================
  SFMODULES = require('bricabrac-single-file-modules');

  ({type_of} = SFMODULES.unstable.require_type_of());

  ({
    show_no_colors: rpr
  } = SFMODULES.unstable.require_show());

  ({debug} = console);

  ({regex} = require('regex'));

  ({hide, set_getter} = SFMODULES.require_managed_property_tools());

  ({nameit} = SFMODULES.require_nameit());

  ({clean_assign} = SFMODULES.unstable.require_clean_assign());

  ({remap, omit} = SFMODULES.unstable.require_remap());

  Bounded_list = (function() {
    //===========================================================================================================
    /* NOTE Future Single-File Module */
    class Bounded_list {
      //---------------------------------------------------------------------------------------------------------
      constructor(max_size = 3) {
        this.max_size = max_size;
        this.data = [];
        return void 0;
      }

      //---------------------------------------------------------------------------------------------------------
      create(...P) {
        this.data.push(clean_assign({}, ...P));
        if (this.size > this.max_size) {
          this.data.shift();
        }
        return this.current;
      }

      //---------------------------------------------------------------------------------------------------------
      assign(...P) {
        return clean_assign(this.current, ...P);
      }

      at(idx) {
        return this.data.at(idx);
      }

    };

    //---------------------------------------------------------------------------------------------------------
    set_getter(Bounded_list.prototype, 'size', function() {
      return this.data.length;
    });

    set_getter(Bounded_list.prototype, 'is_empty', function() {
      return this.data.length === 0;
    });

    set_getter(Bounded_list.prototype, 'current', function() {
      if (this.is_empty) {
        return this.create();
      } else {
        return this.at(-1);
      }
    });

    return Bounded_list;

  }).call(this);

  //===========================================================================================================
  /* NOTE Future Single-File Module */
  Type = class Type {
    //---------------------------------------------------------------------------------------------------------
    constructor(typespace, name, isa) {
      var assign, fail;
      hide(this, 'name', name);
      hide(this, 'T', typespace);
      hide(this, '_isa', isa);
      this.data = {}; // new Bounded_list()
      // create          = (           P... ) => @data.create P...
      assign = (...P) => {
        return clean_assign(this.data, ...P);
      };
      fail = (message, ...P) => {
        clean_assign(this.data, {message}, ...P);
        return false;
      };
      // absorb          = ( type,     x    ) => R = type.isa x; @data.assign type.data.current; R
      hide(this, '_ctx', {
        T: typespace,
        me: this,
        assign,
        fail // create, absorb, }
      });
      set_getter(this._ctx, 'data', () => {
        return this.data; // .current
      });
      return void 0;
    }

    //---------------------------------------------------------------------------------------------------------
    isa(x) {
      var R;
      // try
      //   ( new Test guytest_cfg ).test { types: @hollerith.types, }
      // finally
      //   debug 'Ωhllt___1', "error"
      this.data = {};
      R = this._isa.call(this._ctx, x);
      return R;
    }

    //---------------------------------------------------------------------------------------------------------
    isame(ctx, mapping, x) {
      var R, arity, tmp_ctx;
      // try
      //   ( new Test guytest_cfg ).test { types: @hollerith.types, }
      // finally
      //   debug 'Ωhllt___2', "error"
      switch (arity = arguments.length) {
        case 2:
          R = this._isa.call(ctx, x);
          break;
        case 3:
          tmp_ctx = Object.assign({}, ctx);
          tmp_ctx.data = Object.assign({}, ctx.data);
          R = this._isa.call(tmp_ctx, x);
          remap(ctx.data, mapping);
          break;
        default:
          throw new Error(`Ωbsk___6 expected 2 or 3 arguments, got ${arity}`);
      }
      return R;
    }

  };

  // isok: ( x ) -> { data: @data.create(), ok: ( @_isa.call @_ctx, x ), }

    //===========================================================================================================
  Typespace = class Typespace {
    //---------------------------------------------------------------------------------------------------------
    constructor() {
      var Typeclass, clasz, i, isa, len, name, ref;
      clasz = this.constructor;
      ref = Object.getOwnPropertyNames(clasz);
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        Typeclass = class Typeclass extends Type {};
        nameit(name, Typeclass);
        this[name] = new Typeclass(this, name, isa = clasz[name]);
      }
      return void 0;
    }

  };

  //###########################################################################################################
  // HOLLERITH TYPESPACE
  //===========================================================================================================
  Hollerith_typespace = class Hollerith_typespace extends Typespace {
    //=========================================================================================================
    static text(x) {
      return (type_of(x)) === 'text';
    }

    static nonempty_text(x) {
      return (this.T.text.isa(x)) && x.length > 0;
    }

    static float(x) {
      return Number.isFinite(x);
    }

    static integer(x) {
      return Number.isSafeInteger(x);
    }

    static pinteger(x) {
      return (this.T.integer.isa(x)) && x > 0;
    }

    static zpinteger(x) {
      return (this.T.integer.isa(x)) && x >= 0;
    }

    static cardinal(x) {
      return this.T.zpinteger.isa(x);
    }

    //---------------------------------------------------------------------------------------------------------
    static dimension(x) {
      return this.T.pinteger.isa(x);
    }

    //---------------------------------------------------------------------------------------------------------
    static incremental_text(x) {
      if (!this.T.text.isa(x)) {
        return false;
      }
      // @assign { iam: 'incremental_text', }
      this.assign({
        chrs: Array.from(x)
      });
      debug('Ωbsk___3', this.data);
      return _test_monotony.call(this, x, '<');
    }

    //---------------------------------------------------------------------------------------------------------
    static decremental_text(x) {
      if (!this.T.text.isa(x)) {
        return false;
      }
      this.assign({
        chrs: Array.from(x)
      });
      return _test_monotony.call(this, x, '>');
    }

    //---------------------------------------------------------------------------------------------------------
    static nmag_bare_reversed(x) {
      return this.T.incremental_text.isame(this, x);
    }

    static pmag_bare(x) {
      return this.T.incremental_text.isame(this, x);
    }

    //---------------------------------------------------------------------------------------------------------
    static magnifiers(x) {
      var nmag, nmag_bare_reversed, pmag, pmag_bare;
      if (!this.T.nonempty_text.isa(x)) {
        return this.fail("expected a magnifier, got an empty text");
      }
      [nmag_bare_reversed, pmag_bare] = x.split(/\s+/v);
      if (!this.T.nmag_bare_reversed.isame(this, {
        chrs: 'nmag_chrs'
      }, nmag_bare_reversed)) {
        //.......................................................................................................
        // @assign { iam: 'magnifiers', }; debug 'Ωbsk___4', @data
        return this.fail("???");
      }
      if (!this.T.pmag_bare.isame(this, {
        chrs: 'pmag_chrs'
      }, pmag_bare)) {
        return this.fail("???");
      }
      //.......................................................................................................
      nmag = ' ' + nmag_bare_reversed.reverse();
      pmag = ' ' + pmag_bare;
      this.assign({nmag, pmag});
      return true;
    }

  };

  //===========================================================================================================
  _test_monotony = function(x, cmp) {
    var R, chr, chrs, i, idx, prv_chr, ref;
    ({chrs} = this.data); // = @create data
    if (chrs.length === 0) {
      return this.fail("empty is not monotonic");
    }
    if (chrs.length === 1) {
      return true;
    }
    for (idx = i = 1, ref = chrs.length; (1 <= ref ? i < ref : i > ref); idx = 1 <= ref ? ++i : --i) {
      prv_chr = chrs[idx - 1];
      chr = chrs[idx];
      R = (function() {
        switch (cmp) {
          case '>':
            return prv_chr > chr;
          case '<':
            return prv_chr < chr;
          default:
            throw new Error(`Ωbsk___6 (internal) expected '>' or '<', got ${rpr(cmp)}`);
        }
      })();
      if (R) {
        continue;
      }
      this.assign({
        fail: {x, idx, prv_chr, chr}
      });
      return false;
    }
    return true;
  };

  //===========================================================================================================
  Object.assign(module.exports, {
    types: new Hollerith_typespace(),
    internals: {Type, Typespace, Hollerith_typespace, Bounded_list}
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
