(function() {
  'use strict';
  var Bounded_list, Hollerith_typespace, SFMODULES, Type, Typespace, _test_monotony, debug, hide, nameit, regex, rpr, set_getter, type_of;

  //===========================================================================================================
  SFMODULES = require('bricabrac-single-file-modules');

  ({type_of} = SFMODULES.unstable.require_type_of());

  ({
    show_no_colors: rpr
  } = SFMODULES.unstable.require_show());

  ({debug} = console);

  ({regex} = require('regex'));

  ({hide, set_getter} = SFMODULES.require_managed_property_tools());

  ({nameit} = SFMODULES.require_nameit());

  Bounded_list = (function() {
    //===========================================================================================================
    /* NOTE Future Single-File Module */
    class Bounded_list {
      //---------------------------------------------------------------------------------------------------------
      constructor(max_size = 3) {
        this.max_size = max_size;
        this.data = [];
        return void 0;
      }

      //---------------------------------------------------------------------------------------------------------
      create(...P) {
        this.data.push(Object.assign({}, ...P));
        if (this.size > this.max_size) {
          this.data.shift();
        }
        return this.current;
      }

      //---------------------------------------------------------------------------------------------------------
      assign(...P) {
        return Object.assign(this.current, ...P);
      }

      //---------------------------------------------------------------------------------------------------------
      at(idx) {
        return this.data.at(idx);
      }

    };

    //---------------------------------------------------------------------------------------------------------
    set_getter(Bounded_list.prototype, 'size', function() {
      return this.data.length;
    });

    set_getter(Bounded_list.prototype, 'is_empty', function() {
      return this.data.length === 0;
    });

    set_getter(Bounded_list.prototype, 'current', function() {
      if (this.is_empty) {
        return this.create();
      } else {
        return this.at(-1);
      }
    });

    return Bounded_list;

  }).call(this);

  //===========================================================================================================
  /* NOTE Future Single-File Module */
  Type = class Type {
    //---------------------------------------------------------------------------------------------------------
    constructor(typespace, name, isa) {
      var assign, create, fail;
      hide(this, 'name', name);
      hide(this, 'T', typespace);
      hide(this, '_isa', isa);
      this.data = new Bounded_list();
      create = (...P) => {
        return this.data.create(...P);
      };
      assign = (...P) => {
        return this.data.assign(...P);
      };
      fail = (message, ...P) => {
        this.data.assign({message}, ...P);
        return false;
      };
      hide(this, '_ctx', {
        T: typespace,
        me: this,
        create,
        assign,
        fail
      });
      set_getter(this._ctx, 'data', () => {
        return this.data.current;
      });
      return void 0;
    }

    //---------------------------------------------------------------------------------------------------------
    isa(x) {
      this.data.create();
      return this._isa.call(this._ctx, x);
    }

  };

  //===========================================================================================================
  _test_monotony = function(x, cmp) {
    var R, chr, chrs, i, idx, prv_chr, ref;
    debug('Ωbsk___8', this.data);
    ({chrs} = this.data); // = @create data
    if (chrs.length === 0) {
      return this.fail("empty is not monotonic");
    }
    if (chrs.length === 1) {
      return true;
    }
    for (idx = i = 1, ref = chrs.length; (1 <= ref ? i < ref : i > ref); idx = 1 <= ref ? ++i : --i) {
      prv_chr = chrs[idx - 1];
      chr = chrs[idx];
      R = (function() {
        switch (cmp) {
          case '>':
            return prv_chr > chr;
          case '<':
            return prv_chr < chr;
          default:
            throw new Error(`Ωbsk___8 (internal) expected '>' or '<', got ${rpr(cmp)}`);
        }
      })();
      if (R) {
        continue;
      }
      this.assign({
        fail: {x, idx, prv_chr, chr}
      });
      return false;
    }
    return true;
  };

  //===========================================================================================================
  Typespace = class Typespace {
    //---------------------------------------------------------------------------------------------------------
    constructor() {
      var Typeclass, clasz, i, isa, len, name, ref;
      clasz = this.constructor;
      ref = Object.getOwnPropertyNames(clasz);
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        Typeclass = class Typeclass extends Type {};
        nameit(name, Typeclass);
        this[name] = new Typeclass(this, name, isa = clasz[name]);
      }
      return void 0;
    }

  };

  //===========================================================================================================
  Hollerith_typespace = class Hollerith_typespace extends Typespace {
    //=========================================================================================================
    static text(x) {
      return (type_of(x)) === 'text';
    }

    static nonempty_text(x) {
      return (this.T.text.isa(x)) && x.length > 0;
    }

    static float(x) {
      return Number.isFinite(x);
    }

    static integer(x) {
      return Number.isSafeInteger(x);
    }

    static pinteger(x) {
      return (this.T.integer.isa(x)) && x > 0;
    }

    static zpinteger(x) {
      return (this.T.integer.isa(x)) && x >= 0;
    }

    static cardinal(x) {
      return this.T.zpinteger.isa(x);
    }

    //---------------------------------------------------------------------------------------------------------
    static dimension(x) {
      return this.T.pinteger.isa(x);
    }

    //---------------------------------------------------------------------------------------------------------
    static incremental_text(x) {
      var data;
      if (!this.T.text.isa(x)) {
        return false;
      }
      data = this.create({
        chrs: Array.from(x)
      });
      return _test_monotony.call(this, x, '<');
    }

    //---------------------------------------------------------------------------------------------------------
    static decremental_text(x) {
      var data;
      if (!this.T.text.isa(x)) {
        return false;
      }
      data = this.create({
        chrs: Array.from(x)
      });
      return _test_monotony.call(this, x, '>');
    }

    //---------------------------------------------------------------------------------------------------------
    static nmag_bare_reversed(x) {
      if (!this.T.nonempty_text.isa(x)) {
        return false;
      }
    }

    //---------------------------------------------------------------------------------------------------------
    static pmag_bare(x) {}

    //---------------------------------------------------------------------------------------------------------
    static magnifiers(x) {
      var nmag, nmag_bare_reversed, pmag, pmag_bare;
      if (!this.T.nonempty_text.isa(x)) {
        return false;
      }
      [nmag_bare_reversed, pmag_bare] = x.split(/\s+/v);
      if (!this.T.nmag_bare_reversed.isa(nmag_bare_reversed)) {
        return false;
      }
      if (!this.T.pmag_bare.isa(pmag_bare)) {
        return false;
      }
      nmag = ' ' + nmag_bare_reversed.reverse();
      pmag = ' ' + pmag_bare;
      this.create({nmag, pmag});
      return true;
    }

  };

  //===========================================================================================================
  Object.assign(module.exports, {
    types: new Hollerith_typespace(),
    internals: {Type, Typespace, Hollerith_typespace, Bounded_list}
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
