(function() {
  'use strict';
  var Bounded_list, SFMODULES, Type, Typespace, _test_monotony, debug, hide, nameit, regex, rpr, set_getter, type_of;

  //===========================================================================================================
  SFMODULES = require('bricabrac-single-file-modules');

  ({type_of} = SFMODULES.unstable.require_type_of());

  ({
    show_no_colors: rpr
  } = SFMODULES.unstable.require_show());

  ({debug} = console);

  ({regex} = require('regex'));

  ({hide, set_getter} = SFMODULES.require_managed_property_tools());

  ({nameit} = SFMODULES.require_nameit());

  Bounded_list = (function() {
    //===========================================================================================================
    /* NOTE Future Single-File Module */
    class Bounded_list {
      //---------------------------------------------------------------------------------------------------------
      constructor(max_size = 3) {
        this.max_size = max_size;
        this.data = [];
        return void 0;
      }

      //---------------------------------------------------------------------------------------------------------
      create(...P) {
        this.data.push(Object.assign({}, ...P));
        if (this.size > this.max_size) {
          this.data.shift();
        }
        return this.current;
      }

      //---------------------------------------------------------------------------------------------------------
      at(idx) {
        return this.data.at(idx);
      }

    };

    //---------------------------------------------------------------------------------------------------------
    set_getter(Bounded_list.prototype, 'size', function() {
      return this.data.length;
    });

    set_getter(Bounded_list.prototype, 'is_empty', function() {
      return this.data.length === 0;
    });

    set_getter(Bounded_list.prototype, 'current', function() {
      if (this.is_empty) {
        return this.create();
      } else {
        return this.at(-1);
      }
    });

    return Bounded_list;

  }).call(this);

  //===========================================================================================================
  /* NOTE Future Single-File Module */
  Type = class Type {
    //---------------------------------------------------------------------------------------------------------
    constructor(typespace, name, isa) {
      var create_data;
      hide(this, 'name', name);
      hide(this, 'T', typespace);
      hide(this, '_isa', isa);
      this.data = new Bounded_list();
      create_data = (...P) => {
        return this.data.create(...P);
      };
      hide(this, '_ctx', {
        T: typespace,
        me: this,
        create_data
      });
      return void 0;
    }

    //---------------------------------------------------------------------------------------------------------
    isa(x) {
      return this._isa.call(this._ctx, x);
    }

  };

  //===========================================================================================================
  _test_monotony = function(x, data, cmp) {
    var R, chr, chrs, i, idx, prv_chr, ref;
    ({chrs} = data);
    if (chrs.length === 0) {
      return false;
    }
    if (chrs.length === 1) {
      return true;
    }
    for (idx = i = 1, ref = chrs.length; (1 <= ref ? i < ref : i > ref); idx = 1 <= ref ? ++i : --i) {
      prv_chr = chrs[idx - 1];
      chr = chrs[idx];
      R = (function() {
        switch (cmp) {
          case '>':
            return prv_chr > chr;
          case '<':
            return prv_chr < chr;
          default:
            throw new Error(`Î©bsk___8 (internal) expected '>' or '<', got ${rpr(cmp)}`);
        }
      })();
      if (R) {
        continue;
      }
      data.fail = {x, idx, prv_chr, chr};
      return false;
    }
    return true;
  };

  //===========================================================================================================
  Typespace = class Typespace {
    //---------------------------------------------------------------------------------------------------------
    constructor() {
      var Typeclass, clasz, i, isa, len, name, ref;
      clasz = this.constructor;
      ref = Object.getOwnPropertyNames(clasz);
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        Typeclass = class Typeclass extends Type {};
        nameit(name, Typeclass);
        this[name] = new Typeclass(this, name, isa = clasz[name]);
      }
      return void 0;
    }

    //=========================================================================================================
    static text(x) {
      return (type_of(x)) === 'text';
    }

    static nonempty_text(x) {
      return (this.T.text.isa(x)) && x.length > 0;
    }

    static float(x) {
      return Number.isFinite(x);
    }

    static integer(x) {
      return Number.isSafeInteger(x);
    }

    static pinteger(x) {
      return (this.T.integer.isa(x)) && x > 0;
    }

    static zpinteger(x) {
      return (this.T.integer.isa(x)) && x >= 0;
    }

    static cardinal(x) {
      return this.T.zpinteger.isa(x);
    }

    //---------------------------------------------------------------------------------------------------------
    static dimension(x) {
      return this.T.pinteger.isa(x);
    }

    //---------------------------------------------------------------------------------------------------------
    static incremental_text(x) {
      var data;
      if (!this.T.text.isa(x)) {
        return false;
      }
      data = this.create_data({
        chrs: Array.from(x)
      });
      return _test_monotony(x, data, '<');
    }

    //---------------------------------------------------------------------------------------------------------
    static decremental_text(x) {
      var data;
      if (!this.T.text.isa(x)) {
        return false;
      }
      data = this.create_data({
        chrs: Array.from(x)
      });
      return _test_monotony(x, data, '>');
    }

    //---------------------------------------------------------------------------------------------------------
    static nmag_bare_reversed(x) {
      if (!this.T.nonempty_text(x)) {
        return false;
      }
    }

    //---------------------------------------------------------------------------------------------------------
    static pmag_bare(x) {}

    //---------------------------------------------------------------------------------------------------------
    static magnifiers(x) {
      var nmag, nmag_bare_reversed, pmag, pmag_bare;
      if (!this.T.nonempty_text.isa(x)) {
        return false;
      }
      [nmag_bare_reversed, pmag_bare] = x.split(/\s+/v);
      if (!this.T.nmag_bare_reversed.isa(nmag_bare_reversed)) {
        return false;
      }
      if (!this.T.pmag_bare.isa(pmag_bare)) {
        return false;
      }
      nmag = ' ' + nmag_bare_reversed.reverse();
      return pmag = ' ' + pmag_bare;
    }

  };

  //===========================================================================================================
  module.exports = {
    types: new Typespace(),
    internals: {Type, Typespace, Bounded_list}
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
