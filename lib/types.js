(function() {
  'use strict';
  var CFG, Hollerith_typespace, SFMODULES, Type, Typespace, _test_monotony, debug, freeze, get_max_integer, internals, is_positive_all_niner, is_positive_integer_power_of, regex, rpr, type_of;

  //===========================================================================================================
  SFMODULES = require('../../bricabrac-single-file-modules');

  ({type_of} = SFMODULES.unstable.require_type_of());

  ({
    show_no_colors: rpr
  } = SFMODULES.unstable.require_show());

  ({debug} = console);

  ({regex} = require('regex'));

  ({freeze} = Object);

  ({Type, Typespace, CFG} = SFMODULES.unstable.require_nanotypes());

  // get_max_niner_digit_count,
  // encode,
  // decode,
  // log_to_base,
  // get_required_digits,
  ({is_positive_integer_power_of, is_positive_all_niner, get_max_integer} = SFMODULES.unstable.require_anybase());

  //===========================================================================================================
  internals = Object.assign({Type, Typespace}, {
    //---------------------------------------------------------------------------------------------------------
    get_niners_re: function(_nova) {
      return (regex('g'))` ^ ${_nova}* (?= .+ $ ) `;
    }
  });

  Hollerith_typespace = (function() {
    //===========================================================================================================
    // HOLLERITH TYPESPACE
    //===========================================================================================================
    class Hollerith_typespace extends Typespace {
      //---------------------------------------------------------------------------------------------------------
      constructor(cfg) {
        var blank_esc, blank_splitter;
        super(cfg);
        this.blank.validate(this[CFG].blank);
        blank_esc = RegExp.escape(this[CFG].blank);
        blank_splitter = new RegExp(`(?:${blank_esc})+`, 'gv');
        this[CFG] = freeze({...this[CFG], blank_splitter});
        return void 0;
      }

      //=========================================================================================================
      static text(x) {
        return (type_of(x)) === 'text';
      }

      static nonempty_text(x) {
        return (this.T.text.isa(x)) && (x.length > 0);
      }

      static character(x) {
        return (this.T.text.isa(x)) && (/^.$/v.test(x));
      }

      static float(x) {
        return Number.isFinite(x);
      }

      static integer(x) {
        return Number.isSafeInteger(x);
      }

      static pinteger(x) {
        return (this.T.integer.isa(x)) && (x > 0);
      }

      static zpinteger(x) {
        return (this.T.integer.isa(x)) && (x >= 0);
      }

      static cardinal(x) {
        return this.T.zpinteger.isa(x);
      }

      //---------------------------------------------------------------------------------------------------------
      /* NOTE requiring `x` to be both a character and equal to `@[CFG].blank` means `@[CFG].blank` itself can be tested */
      static blank(x) {
        return (this.T.character.isa(x)) && (x === this[CFG].blank);
      }

      // @blank_setting:   ( x ) -> ( @T.character.isa x )
      // @blank_usage:     ( x ) -> ( x is @[CFG].blank )
      static dimension(x) {
        return this.T.pinteger.isa(x);
      }

      static base(x) {
        return (this.T.pinteger.isa(x)) && (x > 1);
      }

      static digits_numof(x) {
        return (this.T.pinteger.isa(x)) && (x > 1);
      }

      //---------------------------------------------------------------------------------------------------------
      static incremental_text(x) {
        if (!this.T.text.isa(x)) {
          return false;
        }
        this.assign({
          chrs: freeze(Array.from(x))
        });
        return _test_monotony.call(this, x, '<');
      }

      //---------------------------------------------------------------------------------------------------------
      static decremental_text(x) {
        if (!this.T.text.isa(x)) {
          return false;
        }
        this.assign({
          chrs: freeze(Array.from(x))
        });
        return _test_monotony.call(this, x, '>');
      }

      //---------------------------------------------------------------------------------------------------------
      static nmag_bare_reversed(x) {
        return this.T.incremental_text.dm_isa(this.data, null, x);
      }

      static pmag_bare(x) {
        return this.T.incremental_text.dm_isa(this.data, null, x);
      }

      //---------------------------------------------------------------------------------------------------------
      static magnifiers(x) {
        var nmag, nmag_bare_reversed, nmag_chrs, parts, pmag, pmag_bare, pmag_chrs;
        if (!this.T.nonempty_text.isa(x)) {
          return this.fail("expected a magnifier, got an empty text");
        }
        parts = x.split(this[CFG].blank_splitter);
        if (parts.length !== 2) {
          return this.fail(`magnifiers must have exactly 1 blank, got ${parts.length - 1} blanks`);
        }
        [nmag_bare_reversed, pmag_bare] = parts;
        if (!this.T.nmag_bare_reversed.dm_isa(this.data, {
          chrs: 'nmag_chrs_reversed'
        }, nmag_bare_reversed)) {
          //.......................................................................................................
          // @assign { iam: 'magnifiers', }; debug 'Ωbsk___1', @data
          return this.fail("Ωbsk___2 ???");
        }
        if (!this.T.pmag_bare.dm_isa(this.data, {
          chrs: 'pmag_chrs'
        }, pmag_bare)) {
          return this.fail("Ωbsk___3 ???");
        }
        if (!this.T.incremental_text.isa(nmag_bare_reversed + pmag_bare)) {
          return this.fail("Ωbsk___4 ???");
        }
        if (nmag_bare_reversed.length !== pmag_bare.length) {
          return this.fail("Ωbsk___5 ???");
        }
        //.......................................................................................................
        nmag = this[CFG].blank + [...this.data.nmag_chrs_reversed].reverse().join('');
        pmag = this[CFG].blank + pmag_bare;
        nmag_chrs = freeze(Array.from(nmag));
        pmag_chrs = freeze(Array.from(pmag));
        this.assign({nmag, pmag, nmag_chrs, pmag_chrs});
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      static digitset(x) {
        var _naught, _nova, base, leading_niners_re;
        if (!this.T.incremental_text.dm_isa(this.data, {
          chrs: 'digits_lstof'
        }, x)) {
          return false;
        }
        base = this.data.digits_lstof.length;
        if (!this.T.base.isa(base)) {
          return this.fail("an digitset must have 2 chrs or more");
        }
        _naught = this.data.digits_lstof.at(0);
        _nova = this.data.digits_lstof.at(-1);
        leading_niners_re = internals.get_niners_re(_nova);
        this.assign({base, _naught, _nova, leading_niners_re});
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      static uniliterals(x) {
        var _cipher, nun_chrs, nuns, parts, puns, zpun_chrs, zpuns;
        if (!this.T.nonempty_text.isa(x)) {
          return false;
        }
        if (this.T.character.isa(x)) {
          nuns = '';
          zpuns = x;
          nun_chrs = freeze([]);
          zpun_chrs = freeze([x]);
          this.assign({nuns, zpuns, nun_chrs, zpun_chrs});
          return true;
        }
        parts = x.split(this[CFG].blank_splitter);
        if (parts.length !== 3) {
          return this.fail(`uniliterals that are not a single character must have exactly 2 blank2, got ${parts.length - 1} blanks`);
        }
        [nuns, _cipher, puns] = parts;
        zpuns = _cipher + puns;
        this.assign({nuns, zpuns, _cipher});
        if (!this.T.incremental_text.dm_isa(this.data, {
          chrs: 'nun_chrs'
        }, nuns)) {
          return false;
        }
        if (!this.T.incremental_text.dm_isa(this.data, {
          chrs: 'zpun_chrs'
        }, zpuns)) {
          return false;
        }
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      static TMP_alphabet(x) {
        if (!this.T.nonempty_text.dm_isa(this.data, null, x)) {
          return false;
        }
        if (!this.T.incremental_text.dm_isa(this.data, null, x)) {
          return false;
        }
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      static _max_integer_$(x, base) {
        if (!this.T.pinteger.isa(x)) {
          return this.fail("x not a positive safe integer");
        }
        if (!this.T.base.isa(base)) {
          return this.fail("base not a safe integer greater than 1");
        }
        if (!is_positive_all_niner(x, base)) {
          return this.fail("x not a positive all-niners");
        }
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      /* TAINT should be method of `T._max_integer_$` */
      create_max_integer_$({base, digits_numof}) {
        var R;
        this.base.validate(base);
        this.digits_numof.validate(digits_numof);
        R = Math.min(get_max_integer(Number.MAX_SAFE_INTEGER, base), (base ** digits_numof) - 1);
        this._max_integer_$.validate(R, base);
        return R;
      }

      //---------------------------------------------------------------------------------------------------------
      static _max_digits_per_idx_$(x, pmag_chrs) {
        if (!this.T.pinteger.isa(x)) {
          return this.fail("x not a positive safe integer");
        }
        if (!(x <= pmag_chrs.length)) {
          return this.fail(`x ${x} exceeds limit set by magnifiers`);
        }
        return true;
      }

    };

    //=========================================================================================================
    Hollerith_typespace[CFG] = {
      blank: ' '
    };

    return Hollerith_typespace;

  }).call(this);

  //===========================================================================================================
  _test_monotony = function(x, cmp) {
    var R, chr, chrs, i, idx, prv_chr, ref;
    ({chrs} = this.data); // = @create data
    if (chrs.length === 0) {
      return this.fail("empty is not monotonic");
    }
    if (chrs.length === 1) {
      return true;
    }
    for (idx = i = 1, ref = chrs.length; (1 <= ref ? i < ref : i > ref); idx = 1 <= ref ? ++i : --i) {
      prv_chr = chrs[idx - 1];
      chr = chrs[idx];
      R = (function() {
        switch (cmp) {
          case '>':
            return prv_chr > chr;
          case '<':
            return prv_chr < chr;
          default:
            throw new Error(`Ωbsk___6 (internal) expected '>' or '<', got ${rpr(cmp)}`);
        }
      })();
      if (R) {
        continue;
      }
      this.assign({
        fail: {x, idx, prv_chr, chr}
      });
      return false;
    }
    return true;
  };

  //===========================================================================================================
  Object.assign(module.exports, {
    Hollerith_typespace,
    CFG: CFG,
    internals
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
