(function() {
  'use strict';
  var CFG, Hollerith_typespace, SFMODULES, Type, Typespace, _test_monotony, debug, freeze, get_max_integer, internals, is_positive_all_niner, is_positive_integer_power_of, regex, rpr, type_of;

  //===========================================================================================================
  SFMODULES = require('../../bricabrac-single-file-modules');

  ({type_of} = SFMODULES.unstable.require_type_of());

  ({
    show_no_colors: rpr
  } = SFMODULES.unstable.require_show());

  ({debug} = console);

  ({regex} = require('regex'));

  ({freeze} = Object);

  ({Type, Typespace, CFG} = SFMODULES.unstable.require_nanotypes());

  // get_max_niner_digit_count,
  // encode,
  // decode,
  // log_to_base,
  // get_required_digits,
  ({is_positive_integer_power_of, is_positive_all_niner, get_max_integer} = SFMODULES.unstable.require_anybase());

  //===========================================================================================================
  internals = Object.assign({Type, Typespace}, {
    //---------------------------------------------------------------------------------------------------------
    get_leading_novas_re: function(_nova) {
      return (regex('g'))` ^ ${_nova}* (?= .+ $ ) `;
    }
  });

  Hollerith_typespace = (function() {
    //===========================================================================================================
    // HOLLERITH TYPESPACE
    //===========================================================================================================
    class Hollerith_typespace extends Typespace {
      //---------------------------------------------------------------------------------------------------------
      constructor(cfg) {
        var blank_esc, blank_splitter;
        super(cfg);
        this.blank.validate(this[CFG].blank);
        blank_esc = RegExp.escape(this[CFG].blank);
        blank_splitter = new RegExp(`(?:${blank_esc})+`, 'gv');
        this[CFG] = freeze({...this[CFG], blank_splitter});
        return void 0;
      }

      //=========================================================================================================
      static text(x) {
        return (type_of(x)) === 'text';
      }

      static nonempty_text(x) {
        return (this.T.text.isa(x)) && (x.length > 0);
      }

      static character(x) {
        return (this.T.text.isa(x)) && (/^.$/v.test(x));
      }

      static float(x) {
        return Number.isFinite(x);
      }

      static integer(x) {
        return Number.isSafeInteger(x);
      }

      static pinteger(x) {
        return (this.T.integer.isa(x)) && (x > 0);
      }

      static zpinteger(x) {
        return (this.T.integer.isa(x)) && (x >= 0);
      }

      static cardinal(x) {
        return this.T.zpinteger.isa(x);
      }

      //---------------------------------------------------------------------------------------------------------
      /* NOTE requiring `x` to be both a character and equal to `@[CFG].blank` means `@[CFG].blank` itself can be tested */
      static blank(x) {
        return (this.T.character.isa(x)) && (x === this[CFG].blank);
      }

      static dimension(x) {
        return this.T.pinteger.isa(x);
      }

      static _base(x) {
        return (this.T.pinteger.isa(x)) && (x > 1);
      }

      static digits_numof(x) {
        return (this.T.pinteger.isa(x)) && (x > 1);
      }

      //---------------------------------------------------------------------------------------------------------
      static incremental_text(x) {
        if (!this.T.text.isa(x)) {
          return false;
        }
        this.assign({
          chrs: freeze(Array.from(x))
        });
        return _test_monotony.call(this, x, '<');
      }

      //---------------------------------------------------------------------------------------------------------
      static decremental_text(x) {
        if (!this.T.text.isa(x)) {
          return false;
        }
        this.assign({
          chrs: freeze(Array.from(x))
        });
        return _test_monotony.call(this, x, '>');
      }

      //---------------------------------------------------------------------------------------------------------
      static nmag_bare_reversed(x) {
        return this.T.incremental_text.dm_isa(this.data, null, x);
      }

      static pmag_bare(x) {
        return this.T.incremental_text.dm_isa(this.data, null, x);
      }

      //---------------------------------------------------------------------------------------------------------
      static magnifiers(x) {
        var _nmag, _nmag_list, _pmag, _pmag_list, nmag_bare_reversed, parts, pmag_bare;
        if (!this.T.nonempty_text.isa(x)) {
          return this.fail("expected a magnifier, got an empty text");
        }
        if ((parts = x.split(this[CFG].blank_splitter)).length !== 2) {
          return this.fail(`magnifiers must have exactly 1 blank, got ${parts.length - 1} blanks`);
        }
        [nmag_bare_reversed, pmag_bare] = parts;
        if (!this.T.nmag_bare_reversed.dm_isa(this.data, {
          chrs: 'nmag_chrs_reversed'
        }, nmag_bare_reversed)) {
          //.......................................................................................................
          // @assign { iam: 'magnifiers', }; debug 'Ωbsk___1', @data
          return this.fail("Ωbsk___2 ???");
        }
        if (!this.T.pmag_bare.dm_isa(this.data, {
          chrs: '_pmag_list'
        }, pmag_bare)) {
          return this.fail("Ωbsk___3 ???");
        }
        if (!this.T.incremental_text.isa(nmag_bare_reversed + pmag_bare)) {
          return this.fail("Ωbsk___4 ???");
        }
        if (nmag_bare_reversed.length !== pmag_bare.length) {
          return this.fail("Ωbsk___5 ???");
        }
        //.......................................................................................................
        _nmag = this[CFG].blank + [...this.data.nmag_chrs_reversed].reverse().join('');
        _pmag = this[CFG].blank + pmag_bare;
        _nmag_list = freeze(Array.from(_nmag));
        _pmag_list = freeze(Array.from(_pmag));
        this.assign({_nmag, _pmag, _nmag_list, _pmag_list});
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      static digitset(x) {
        var _base, _leading_novas_re, _naught, _nova;
        if (!this.T.incremental_text.dm_isa(this.data, {
          chrs: '_digits_list'
        }, x)) {
          return false;
        }
        _base = this.data._digits_list.length;
        if (!this.T._base.isa(_base)) {
          return this.fail("an digitset must have 2 chrs or more");
        }
        _naught = this.data._digits_list.at(0);
        _nova = this.data._digits_list.at(-1);
        _leading_novas_re = internals.get_leading_novas_re(_nova);
        this.assign({_base, _naught, _nova, _leading_novas_re});
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      static uniliterals(x) {
        var _cipher, _nuns, _nuns_list, _puns, _zpuns, _zpuns_list, parts;
        if (!this.T.nonempty_text.isa(x)) {
          return false;
        }
        if (this.T.character.isa(x)) {
          _nuns = '';
          _zpuns = x;
          _nuns_list = freeze([]);
          _zpuns_list = freeze([x]);
          this.assign({_nuns, _zpuns, _nuns_list, _zpuns_list});
          return true;
        }
        parts = x.split(this[CFG].blank_splitter);
        if (parts.length !== 3) {
          return this.fail(`uniliterals that are not a single character must have exactly 2 blank2, got ${parts.length - 1} blanks`);
        }
        [_nuns, _cipher, _puns] = parts;
        _zpuns = _cipher + _puns;
        this.assign({_nuns, _zpuns, _cipher});
        if (!this.T.incremental_text.dm_isa(this.data, {
          chrs: '_nuns_list'
        }, _nuns)) {
          return false;
        }
        if (!this.T.incremental_text.dm_isa(this.data, {
          chrs: '_zpuns_list'
        }, _zpuns)) {
          return false;
        }
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      static _alphabet(x) {
        if (!this.T.nonempty_text.dm_isa(this.data, null, x)) {
          return false;
        }
        if (!this.T.incremental_text.dm_isa(this.data, null, x)) {
          return false;
        }
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      static _max_integer_$(x, _base) {
        if (!this.T.pinteger.isa(x)) {
          return this.fail("x not a positive safe integer");
        }
        if (!this.T._base.isa(_base)) {
          return this.fail("_base not a safe integer greater than 1");
        }
        if (!is_positive_all_niner(x, _base)) {
          return this.fail("x not a positive all-niners");
        }
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      /* TAINT should be method of `T._max_integer_$` */
      create_max_integer_$({_base, digits_numof}) {
        var R;
        this._base.validate(_base);
        this.digits_numof.validate(digits_numof);
        R = Math.min(get_max_integer(Number.MAX_SAFE_INTEGER, _base), (_base ** digits_numof) - 1);
        this._max_integer_$.validate(R, _base);
        return R;
      }

      //---------------------------------------------------------------------------------------------------------
      static _max_digits_per_idx_$(x, _pmag_list) {
        if (!this.T.pinteger.isa(x)) {
          return this.fail("x not a positive safe integer");
        }
        if (!(x <= _pmag_list.length)) {
          return this.fail(`x ${x} exceeds limit set by magnifiers`);
        }
        return true;
      }

    };

    //=========================================================================================================
    Hollerith_typespace[CFG] = {
      blank: ' '
    };

    return Hollerith_typespace;

  }).call(this);

  //===========================================================================================================
  _test_monotony = function(x, cmp) {
    var R, chr, chrs, i, idx, prv_chr, ref;
    ({chrs} = this.data); // = @create data
    if (chrs.length === 0) {
      return this.fail("empty is not monotonic");
    }
    if (chrs.length === 1) {
      return true;
    }
    for (idx = i = 1, ref = chrs.length; (1 <= ref ? i < ref : i > ref); idx = 1 <= ref ? ++i : --i) {
      prv_chr = chrs[idx - 1];
      chr = chrs[idx];
      R = (function() {
        switch (cmp) {
          case '>':
            return prv_chr > chr;
          case '<':
            return prv_chr < chr;
          default:
            throw new Error(`Ωbsk___6 (internal) expected '>' or '<', got ${rpr(cmp)}`);
        }
      })();
      if (R) {
        continue;
      }
      this.assign({
        fail: {x, idx, prv_chr, chr}
      });
      return false;
    }
    return true;
  };

  //===========================================================================================================
  Object.assign(module.exports, {
    Hollerith_typespace,
    CFG: CFG,
    internals
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3R5cGVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUFBO0FBQUEsTUFBQSxHQUFBLEVBQUEsbUJBQUEsRUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLFNBQUEsRUFBQSxjQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxlQUFBLEVBQUEsU0FBQSxFQUFBLHFCQUFBLEVBQUEsNEJBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUE7OztFQUdBLFNBQUEsR0FBNEIsT0FBQSxDQUFRLHFDQUFSOztFQUM1QixDQUFBLENBQUUsT0FBRixDQUFBLEdBQTRCLFNBQVMsQ0FBQyxRQUFRLENBQUMsZUFBbkIsQ0FBQSxDQUE1Qjs7RUFDQSxDQUFBO0lBQUUsY0FBQSxFQUFnQjtFQUFsQixDQUFBLEdBQTRCLFNBQVMsQ0FBQyxRQUFRLENBQUMsWUFBbkIsQ0FBQSxDQUE1Qjs7RUFDQSxDQUFBLENBQUUsS0FBRixDQUFBLEdBQTRCLE9BQTVCOztFQUNBLENBQUEsQ0FBRSxLQUFGLENBQUEsR0FBNEIsT0FBQSxDQUFRLE9BQVIsQ0FBNUI7O0VBQ0EsQ0FBQSxDQUFFLE1BQUYsQ0FBQSxHQUE0QixNQUE1Qjs7RUFDQSxDQUFBLENBQUUsSUFBRixFQUNFLFNBREYsRUFFRSxHQUZGLENBQUEsR0FFNEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxpQkFBbkIsQ0FBQSxDQUY1QixFQVRBOzs7Ozs7O0VBWUEsQ0FBQSxDQUFFLDRCQUFGLEVBQ0UscUJBREYsRUFFRSxlQUZGLENBQUEsR0FRNEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxlQUFuQixDQUFBLENBUjVCLEVBWkE7OztFQXdCQSxTQUFBLEdBQVksTUFBTSxDQUFDLE1BQVAsQ0FBYyxDQUFFLElBQUYsRUFBUSxTQUFSLENBQWQsRUFHVixDQUFBOztJQUFBLG9CQUFBLEVBQXNCLFFBQUEsQ0FBRSxLQUFGLENBQUE7YUFBYSxDQUFFLEtBQUEs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LEdBQWlCLFFBQUEsQ0FBRSxDQUFGLEVBQUssR0FBTCxDQUFBO0FBQ2pCLFFBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUE7SUFBRSxDQUFBLENBQUUsSUFBRixDQUFBLEdBQVksSUFBQyxDQUFBLElBQWIsRUFBRjtJQUNFLElBQTZDLElBQUksQ0FBQyxNQUFMLEtBQWUsQ0FBNUQ7QUFBQSxhQUFTLElBQUMsQ0FBQSxJQUFELENBQU0sd0JBQU4sRUFBVDs7SUFDQSxJQUE2QyxJQUFJLENBQUMsTUFBTCxLQUFlLENBQTVEO0FBQUEsYUFBTyxLQUFQOztJQUNBLEtBQVcsMEZBQVg7TUFDRSxPQUFBLEdBQVUsSUFBSSxDQUFFLEdBQUEsR0FBTSxDQUFSO01BQ2QsR0FBQSxHQUFVLElBQUksQ0FBRSxHQUFGO01BQ2QsQ0FBQTtBQUFVLGdCQUFPLEdBQVA7QUFBQSxlQUNILEdBREc7bUJBQ00sT0FBQSxHQUFVO0FBRGhCLGVBRUgsR0FGRzttQkFFTSxPQUFBLEdBQVU7QUFGaEI7WUFHSCxNQUFNLElBQUksS0FBSixDQUFVLENBQUEsNkNBQUEsQ0FBQSxDQUFnRCxHQUFBLENBQUksR0FBSixDQUFoRCxDQUFBLENBQVY7QUFISDs7TUFJVixJQUFZLENBQVo7QUFBQSxpQkFBQTs7TUFDQSxJQUFDLENBQUEsTUFBRCxDQUFRO1FBQUUsSUFBQSxFQUFNLENBQUUsQ0FBRixFQUFLLEdBQUwsRUFBVSxPQUFWLEVBQW1CLEdBQW5CO01BQVIsQ0FBUjtBQUNBLGFBQU87SUFUVDtBQVVBLFdBQU87RUFkUSxFQXJLakI7OztFQXNMQSxNQUFNLENBQUMsTUFBUCxDQUFjLE1BQU0sQ0FBQyxPQUFyQixFQUE4QjtJQUM1QixtQkFENEI7SUFFNUIsR0FBQSxFQUFzQixHQUZNO0lBRzVCO0VBSDRCLENBQTlCO0FBdExBIiwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCdcblxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5TRk1PRFVMRVMgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnLi4vLi4vYnJpY2FicmFjLXNpbmdsZS1maWxlLW1vZHVsZXMnXG57IHR5cGVfb2YsICAgICAgICAgICAgICB9ID0gU0ZNT0RVTEVTLnVuc3RhYmxlLnJlcXVpcmVfdHlwZV9vZigpXG57IHNob3dfbm9fY29sb3JzOiBycHIsICB9ID0gU0ZNT0RVTEVTLnVuc3RhYmxlLnJlcXVpcmVfc2hvdygpXG57IGRlYnVnLCAgICAgICAgICAgICAgICB9ID0gY29uc29sZVxueyByZWdleCwgICAgICAgICAgICAgICAgfSA9IHJlcXVpcmUgJ3JlZ2V4J1xueyBmcmVlemUsICAgICAgICAgICAgICAgfSA9IE9iamVjdFxueyBUeXBlLFxuICBUeXBlc3BhY2UsXG4gIENGRywgICAgICAgICAgICAgICAgICB9ID0gU0ZNT0RVTEVTLnVuc3RhYmxlLnJlcXVpcmVfbmFub3R5cGVzKClcbnsgaXNfcG9zaXRpdmVfaW50ZWdlcl9wb3dlcl9vZixcbiAgaXNfcG9zaXRpdmVfYWxsX25pbmVyLFxuICBnZXRfbWF4X2ludGVnZXIsXG4gICMgZ2V0X21heF9uaW5lcl9kaWdpdF9jb3VudCxcbiAgIyBlbmNvZGUsXG4gICMgZGVjb2RlLFxuICAjIGxvZ190b19iYXNlLFxuICAjIGdldF9yZXF1aXJlZF9kaWdpdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9ID0gU0ZNT0RVTEVTLnVuc3RhYmxlLnJlcXVpcmVfYW55YmFzZSgpXG5cblxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5pbnRlcm5hbHMgPSBPYmplY3QuYXNzaWduIHsgVHlwZSwgVHlwZXNwYWNlLCB9LFxuXG4gICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgZ2V0X2xlYWRpbmdfbm92YXNfcmU6ICggX25vdmEgKSAtPiAoIHJlZ2V4ICdnJyApXCJcIlwiIF4gI3tfbm92YX0qICg/PSAuKyAkICkgXCJcIlwiXG5cblxuXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiMgSE9MTEVSSVRIIFRZUEVTUEFDRVxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBIb2xsZXJpdGhfdHlwZXNwYWNlIGV4dGVuZHMgVHlwZXNwYWNlXG5cbiAgIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBjb25zdHJ1Y3RvcjogKCBjZmcgKSAtPlxuICAgIHN1cGVyIGNmZ1xuICAgIEBibGFuay52YWxpZGF0ZSBAW0NGR10uYmxhbmtcbiAgICBibGFua19lc2MgICAgICAgPSBSZWdFeHAuZXNjYXBlIEBbQ0ZHXS5ibGFua1xuICAgIGJsYW5rX3NwbGl0dGVyICA9IG5ldyBSZWdFeHAgXCIoPzoje2JsYW5rX2VzY30pK1wiLCAnZ3YnXG4gICAgQFtDRkddICAgICAgICAgID0gZnJlZXplIHsgQFtDRkddLi4uLCBibGFua19zcGxpdHRlciwgfVxuICAgIHJldHVybiB1bmRlZmluZWRcblxuXG4gICM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgQFtDRkddOlxuICAgIGJsYW5rOiAnICdcblxuICAjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIEB0ZXh0OiAgICAgICAgICAgICggeCApIC0+ICggdHlwZV9vZiB4ICkgaXMgJ3RleHQnXG4gIEBub25lbXB0eV90ZXh0OiAgICggeCApIC0+ICggQFQudGV4dC5pc2EgeCApIGFuZCAoIHgubGVuZ3RoID4gMCApXG4gIEBjaGFyYWN0ZXI6ICAgICAgICggeCApIC0+ICggQFQudGV4dC5pc2EgeCApIGFuZCAoIC9eLiQvdi50ZXN0IHggKVxuICBAZmxvYXQ6ICAgICAgICAgICAoIHggKSAtPiBOdW1iZXIuaXNGaW5pdGUgeFxuICBAaW50ZWdlcjogICAgICAgICAoIHggKSAtPiBOdW1iZXIuaXNTYWZlSW50ZWdlciB4XG4gIEBwaW50ZWdlcjogICAgICAgICggeCApIC0+ICggQFQuaW50ZWdlci5pc2EgeCApIGFuZCAoIHggPiAgMCApXG4gIEB6cGludGVnZXI6ICAgICAgICggeCApIC0+ICggQFQuaW50ZWdlci5pc2EgeCApIGFuZCAoIHggPj0gMCApXG4gIEBjYXJkaW5hbDogICAgICAgICggeCApIC0+IEBULnpwaW50ZWdlci5pc2EgeFxuICAjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICMjIyBOT1RFIHJlcXVpcmluZyBgeGAgdG8gYmUgYm90aCBhIGNoYXJhY3RlciBhbmQgZXF1YWwgdG8gYEBbQ0ZHXS5ibGFua2AgbWVhbnMgYEBbQ0ZHXS5ibGFua2AgaXRzZWxmIGNhbiBiZSB0ZXN0ZWQgIyMjXG4gIEBibGFuazogICAgICAgICAgICggeCApIC0+ICggQFQuY2hhcmFjdGVyLmlzYSB4ICkgYW5kICggeCBpcyBAW0NGR10uYmxhbmsgKVxuICBAZGltZW5zaW9uOiAgICAgICAoIHggKSAtPiAoIEBULnBpbnRlZ2VyLmlzYSB4IClcbiAgQF9iYXNlOiAgICAgICAgICAgKCB4ICkgLT4gKCBAVC5waW50ZWdlci5pc2EgeCApIGFuZCAoIHggPiAxIClcbiAgQGRpZ2l0c19udW1vZjogICAgKCB4ICkgLT4gKCBAVC5waW50ZWdlci5pc2EgeCApIGFuZCAoIHggPiAxIClcblxuICAjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIEBpbmNyZW1lbnRhbF90ZXh0OiAoIHggKSAtPlxuICAgIHJldHVybiBmYWxzZSB1bmxlc3MgQFQudGV4dC5pc2EgeFxuICAgIEBhc3NpZ24geyBjaHJzOiAoIGZyZWV6ZSBBcnJheS5mcm9tIHggKSwgfVxuICAgIHJldHVybiBfdGVzdF9tb25vdG9ueS5jYWxsIEAsIHgsICc8J1xuXG4gICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgQGRlY3JlbWVudGFsX3RleHQ6ICggeCApIC0+XG4gICAgcmV0dXJuIGZhbHNlIHVubGVzcyBAVC50ZXh0LmlzYSB4XG4gICAgQGFzc2lnbiB7IGNocnM6ICggZnJlZXplIEFycmF5LmZyb20geCApLCB9XG4gICAgcmV0dXJuIF90ZXN0X21vbm90b255LmNhbGwgQCwgeCwgJz4nXG5cbiAgIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBAbm1hZ19iYXJlX3JldmVyc2VkOiAgKCB4ICkgLT4gQFQuaW5jcmVtZW50YWxfdGV4dC5kbV9pc2EgQGRhdGEsIG51bGwsIHhcbiAgQHBtYWdfYmFyZTogICAgICAgICAgICggeCApIC0+IEBULmluY3JlbWVudGFsX3RleHQuZG1faXNhIEBkYXRhLCBudWxsLCB4XG5cbiAgIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBAbWFnbmlmaWVyczogKCB4ICkgLT5cbiAgICByZXR1cm4gKCBAZmFpbCBcImV4cGVjdGVkIGEgbWFnbmlmaWVyLCBnb3QgYW4gZW1wdHkgdGV4dFwiICkgdW5sZXNzIEBULm5vbmVtcHR5X3RleHQuaXNhIHhcbiAgICB1bmxlc3MgKCBwYXJ0cyA9IHguc3BsaXQgQFtDRkddLmJsYW5rX3NwbGl0dGVyICkubGVuZ3RoIGlzIDJcbiAgICAgIHJldHVybiAoIEBmYWlsIFwibWFnbmlmaWVycyBtdXN0IGhhdmUgZXhhY3RseSAxIGJsYW5rLCBnb3QgI3twYXJ0cy5sZW5ndGggLSAxfSBibGFua3NcIilcbiAgICBbIG5tYWdfYmFyZV9yZXZlcnNlZCxcbiAgICAgIHBtYWdfYmFyZSwgICAgICAgICAgXSA9IHBhcnRzXG4gICAgIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgICAjIEBhc3NpZ24geyBpYW06ICdtYWduaWZpZXJzJywgfTsgZGVidWcgJ86pYnNrX19fMScsIEBkYXRhXG4gICAgcmV0dXJuICggQGZhaWwgXCLOqWJza19fXzIgPz8/XCIgKSB1bmxlc3MgIEBULm5tYWdfYmFyZV9yZXZlcnNlZC5kbV9pc2EgQGRhdGEsIHsgY2hyczogJ25tYWdfY2hyc19yZXZlcnNlZCcsIH0sICBubWFnX2JhcmVfcmV2ZXJzZWRcbiAgICByZXR1cm4gKCBAZmFpbCBcIs6pYnNrX19fMyA/Pz9cIiApIHVubGVzcyAgQFQucG1hZ19iYXJlLmRtX2lzYSAgICAgICAgICBAZGF0YSwgeyBjaHJzOiAnX3BtYWdfbGlzdCcsIH0sICAgICAgICAgIHBtYWdfYmFyZVxuICAgIHJldHVybiAoIEBmYWlsIFwizqlic2tfX180ID8/P1wiICkgdW5sZXNzICBAVC5pbmNyZW1lbnRhbF90ZXh0LmlzYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm1hZ19iYXJlX3JldmVyc2VkICsgcG1hZ19iYXJlXG4gICAgcmV0dXJuICggQGZhaWwgXCLOqWJza19fXzUgPz8/XCIgKSB1bmxlc3MgIG5tYWdfYmFyZV9yZXZlcnNlZC5sZW5ndGggaXMgcG1hZ19iYXJlLmxlbmd0aFxuICAgICMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gICAgX25tYWcgICAgICAgPSBAW0NGR10uYmxhbmsgKyBbIEBkYXRhLm5tYWdfY2hyc19yZXZlcnNlZC4uLiwgXS5yZXZlcnNlKCkuam9pbiAnJ1xuICAgIF9wbWFnICAgICAgID0gQFtDRkddLmJsYW5rICsgcG1hZ19iYXJlXG4gICAgX25tYWdfbGlzdCAgPSBmcmVlemUgQXJyYXkuZnJvbSBfbm1hZ1xuICAgIF9wbWFnX2xpc3QgID0gZnJlZXplIEFycmF5LmZyb20gX3BtYWdcbiAgICBAYXNzaWduIHsgX25tYWcsIF9wbWFnLCBfbm1hZ19saXN0LCBfcG1hZ19saXN0LCB9XG4gICAgcmV0dXJuIHRydWVcblxuICAjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIEBkaWdpdHNldDogKCB4ICkgLT5cbiAgICByZXR1cm4gZmFsc2UgdW5sZXNzIEBULmluY3JlbWVudGFsX3RleHQuZG1faXNhIEBkYXRhLCB7IGNocnM6ICdfZGlnaXRzX2xpc3QnLCB9LCB4XG4gICAgX2Jhc2UgICAgICAgICAgICAgPSBAZGF0YS5fZGlnaXRzX2xpc3QubGVuZ3RoXG4gICAgcmV0dXJuIEBmYWlsIFwiYW4gZGlnaXRzZXQgbXVzdCBoYXZlIDIgY2hycyBvciBtb3JlXCIgdW5sZXNzIEBULl9iYXNlLmlzYSBfYmFzZVxuICAgIF9uYXVnaHQgICAgICAgICAgID0gQGRhdGEuX2RpZ2l0c19saXN0LmF0ICAwXG4gICAgX25vdmEgICAgICAgICAgICAgPSBAZGF0YS5fZGlnaXRzX2xpc3QuYXQgLTFcbiAgICBfbGVhZGluZ19ub3Zhc19yZSA9IGludGVybmFscy5nZXRfbGVhZGluZ19ub3Zhc19yZSBfbm92YVxuICAgIEBhc3NpZ24geyBfYmFzZSwgX25hdWdodCwgX25vdmEsIF9sZWFkaW5nX25vdmFzX3JlLCB9XG4gICAgcmV0dXJuIHRydWVcblxuICAjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIEB1bmlsaXRlcmFsczogKCB4ICkgLT5cbiAgICByZXR1cm4gZmFsc2UgdW5sZXNzIEBULm5vbmVtcHR5X3RleHQuaXNhIHhcbiAgICBpZiBAVC5jaGFyYWN0ZXIuaXNhIHhcbiAgICAgIF9udW5zICAgICAgID0gJydcbiAgICAgIF96cHVucyAgICAgID0geFxuICAgICAgX251bnNfbGlzdCAgPSBmcmVlemUgW11cbiAgICAgIF96cHVuc19saXN0ID0gZnJlZXplIFsgeCwgXVxuICAgICAgQGFzc2lnbiB7IF9udW5zLCBfenB1bnMsIF9udW5zX2xpc3QsIF96cHVuc19saXN0LCB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIHBhcnRzID0geC5zcGxpdCBAW0NGR10uYmxhbmtfc3BsaXR0ZXJcbiAgICB1bmxlc3MgcGFydHMubGVuZ3RoIGlzIDNcbiAgICAgIHJldHVybiAoIEBmYWlsIFwidW5pbGl0ZXJhbHMgdGhhdCBhcmUgbm90IGEgc2luZ2xlIGNoYXJhY3RlciBtdXN0IGhhdmUgZXhhY3RseSAyIGJsYW5rMiwgZ290ICN7cGFydHMubGVuZ3RoIC0gMX0gYmxhbmtzXCIpXG4gICAgWyBfbnVucyxcbiAgICAgIF9jaXBoZXIsXG4gICAgICBfcHVucywgXSA9IHBhcnRzXG4gICAgX3pwdW5zICAgICA9IF9jaXBoZXIgKyBfcHVuc1xuICAgIEBhc3NpZ24geyBfbnVucywgX3pwdW5zLCBfY2lwaGVyLCB9XG4gICAgcmV0dXJuIGZhbHNlIHVubGVzcyBAVC5pbmNyZW1lbnRhbF90ZXh0LmRtX2lzYSBAZGF0YSwgeyBjaHJzOiAnX251bnNfbGlzdCcsIH0sICBfbnVuc1xuICAgIHJldHVybiBmYWxzZSB1bmxlc3MgQFQuaW5jcmVtZW50YWxfdGV4dC5kbV9pc2EgQGRhdGEsIHsgY2hyczogJ196cHVuc19saXN0JywgfSwgX3pwdW5zXG4gICAgcmV0dXJuIHRydWVcblxuICAjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIEBfYWxwaGFiZXQ6ICggeCApIC0+XG4gICAgcmV0dXJuIGZhbHNlIHVubGVzcyBAVC5ub25lbXB0eV90ZXh0LmRtX2lzYSAgICBAZGF0YSwgbnVsbCwgeFxuICAgIHJldHVybiBmYWxzZSB1bmxlc3MgQFQuaW5jcmVtZW50YWxfdGV4dC5kbV9pc2EgQGRhdGEsIG51bGwsIHhcbiAgICByZXR1cm4gdHJ1ZVxuXG4gICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgQF9tYXhfaW50ZWdlcl8kOiAoIHgsIF9iYXNlICkgLT5cbiAgICByZXR1cm4gQGZhaWwgXCJ4IG5vdCBhIHBvc2l0aXZlIHNhZmUgaW50ZWdlclwiICAgICAgICAgICB1bmxlc3MgQFQucGludGVnZXIuaXNhICAgICAgICB4XG4gICAgcmV0dXJuIEBmYWlsIFwiX2Jhc2Ugbm90IGEgc2FmZSBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiAxXCIgIHVubGVzcyBAVC5fYmFzZS5pc2EgICAgICAgICAgICBfYmFzZVxuICAgIHJldHVybiBAZmFpbCBcInggbm90IGEgcG9zaXRpdmUgYWxsLW5pbmVyc1wiICAgICAgICAgICAgIHVubGVzcyBpc19wb3NpdGl2ZV9hbGxfbmluZXIgIHgsIF9iYXNlXG4gICAgcmV0dXJuIHRydWVcblxuICAjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICMjIyBUQUlOVCBzaG91bGQgYmUgbWV0aG9kIG9mIGBULl9tYXhfaW50ZWdlcl8kYCAjIyNcbiAgY3JlYXRlX21heF9pbnRlZ2VyXyQ6ICh7IF9iYXNlLCBkaWdpdHNfbnVtb2YsIH0pIC0+XG4gICAgQF9iYXNlLnZhbGlkYXRlICAgICAgICBfYmFzZVxuICAgIEBkaWdpdHNfbnVtb2YudmFsaWRhdGUgZGlnaXRzX251bW9mXG4gICAgUiA9IE1hdGgubWluICggZ2V0X21heF9pbnRlZ2VyIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLCBfYmFzZSApLCAoICggX2Jhc2UgKiogZGlnaXRzX251bW9mICkgLSAxIClcbiAgICBAX21heF9pbnRlZ2VyXyQudmFsaWRhdGUgUiwgX2Jhc2VcbiAgICByZXR1cm4gUlxuXG4gICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgQF9tYXhfZGlnaXRzX3Blcl9pZHhfJDogKCB4LCBfcG1hZ19saXN0ICkgLT5cbiAgICByZXR1cm4gQGZhaWwgXCJ4IG5vdCBhIHBvc2l0aXZlIHNhZmUgaW50ZWdlclwiICAgICAgICAgICB1bmxlc3MgQFQucGludGVnZXIuaXNhIHhcbiAgICByZXR1cm4gQGZhaWwgXCJ4ICN7eH0gZXhjZWVkcyBsaW1pdCBzZXQgYnkgbWFnbmlmaWVyc1wiICB1bmxlc3MgeCA8PSBfcG1hZ19saXN0Lmxlbmd0aFxuICAgIHJldHVybiB0cnVlXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuX3Rlc3RfbW9ub3RvbnkgPSAoIHgsIGNtcCApIC0+XG4gIHsgY2hycywgfSA9IEBkYXRhICMgPSBAY3JlYXRlIGRhdGFcbiAgcmV0dXJuICggQGZhaWwgXCJlbXB0eSBpcyBub3QgbW9ub3RvbmljXCIgKSBpZiBjaHJzLmxlbmd0aCBpcyAwXG4gIHJldHVybiB0cnVlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNocnMubGVuZ3RoIGlzIDFcbiAgZm9yIGlkeCBpbiBbIDEgLi4uIGNocnMubGVuZ3RoIF1cbiAgICBwcnZfY2hyID0gY2hyc1sgaWR4IC0gMSBdXG4gICAgY2hyICAgICA9IGNocnNbIGlkeCAgICAgXVxuICAgIFIgICAgICAgPSBzd2l0Y2ggY21wXG4gICAgICB3aGVuICc+JyB0aGVuIHBydl9jaHIgPiBjaHJcbiAgICAgIHdoZW4gJzwnIHRoZW4gcHJ2X2NociA8IGNoclxuICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IgXCLOqWJza19fXzYgKGludGVybmFsKSBleHBlY3RlZCAnPicgb3IgJzwnLCBnb3QgI3tycHIgY21wfVwiXG4gICAgY29udGludWUgaWYgUlxuICAgIEBhc3NpZ24geyBmYWlsOiB7IHgsIGlkeCwgcHJ2X2NociwgY2hyLCB9LCB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIHJldHVybiB0cnVlXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuT2JqZWN0LmFzc2lnbiBtb2R1bGUuZXhwb3J0cywge1xuICBIb2xsZXJpdGhfdHlwZXNwYWNlLFxuICBDRkc6ICAgICAgICAgICAgICAgICAgQ0ZHLFxuICBpbnRlcm5hbHMsIH1cbiJdfQ==
