(function() {
  'use strict';
  var CFG, Hollerith_typespace, SFMODULES, Type, Typespace, _test_monotony, debug, freeze, rpr, type_of;

  //===========================================================================================================
  SFMODULES = require('../../bricabrac-single-file-modules');

  ({type_of} = SFMODULES.unstable.require_type_of());

  ({
    show_no_colors: rpr
  } = SFMODULES.unstable.require_show());

  ({debug} = console);

  // { regex,                } = require 'regex'
  ({freeze} = Object);

  ({Type, Typespace, CFG} = SFMODULES.unstable.require_nanotypes());

  Hollerith_typespace = (function() {
    //###########################################################################################################
    // HOLLERITH TYPESPACE
    //===========================================================================================================
    class Hollerith_typespace extends Typespace {
      //---------------------------------------------------------------------------------------------------------
      constructor(cfg) {
        var blank_esc, blank_splitter;
        super(cfg);
        this.blank.validate(this[CFG].blank);
        blank_esc = RegExp.escape(this[CFG].blank);
        blank_splitter = new RegExp(`(?:${blank_esc})+`, 'v');
        this[CFG] = freeze({...this[CFG], blank_splitter});
        return void 0;
      }

      //=========================================================================================================
      static text(x) {
        return (type_of(x)) === 'text';
      }

      static nonempty_text(x) {
        return (this.T.text.isa(x)) && (x.length > 0);
      }

      static character(x) {
        return (this.T.text.isa(x)) && (/^.$/v.test(x));
      }

      static float(x) {
        return Number.isFinite(x);
      }

      static integer(x) {
        return Number.isSafeInteger(x);
      }

      static pinteger(x) {
        return (this.T.integer.isa(x)) && (x > 0);
      }

      static zpinteger(x) {
        return (this.T.integer.isa(x)) && (x >= 0);
      }

      static cardinal(x) {
        return this.T.zpinteger.isa(x);
      }

      //---------------------------------------------------------------------------------------------------------
      /* NOTE requiring `x` to be both a character and equal to `@[CFG].blank` means `@[CFG].blank` itself can be tested */
      static blank(x) {
        return (this.T.character.isa(x)) && (x === this[CFG].blank);
      }

      // @blank_setting:   ( x ) -> ( @T.character.isa x )
      // @blank_usage:     ( x ) -> ( x is @[CFG].blank )
      static dimension(x) {
        return this.T.pinteger.isa(x);
      }

      static base(x) {
        return (this.T.pinteger.isa(x)) && (x > 1);
      }

      //---------------------------------------------------------------------------------------------------------
      static incremental_text(x) {
        if (!this.T.text.isa(x)) {
          return false;
        }
        this.assign({
          chrs: freeze(Array.from(x))
        });
        return _test_monotony.call(this, x, '<');
      }

      //---------------------------------------------------------------------------------------------------------
      static decremental_text(x) {
        if (!this.T.text.isa(x)) {
          return false;
        }
        this.assign({
          chrs: freeze(Array.from(x))
        });
        return _test_monotony.call(this, x, '>');
      }

      //---------------------------------------------------------------------------------------------------------
      static nmag_bare_reversed(x) {
        return this.T.incremental_text.isa(x, this.data);
      }

      static pmag_bare(x) {
        return this.T.incremental_text.isa(x, this.data);
      }

      //---------------------------------------------------------------------------------------------------------
      static magnifiers(x) {
        var nmag, nmag_bare_reversed, nmag_chrs, parts, pmag, pmag_bare, pmag_chrs;
        if (!this.T.nonempty_text.isa(x)) {
          return this.fail("expected a magnifier, got an empty text");
        }
        parts = x.split(this[CFG].blank_splitter);
        if (parts.length !== 2) {
          return this.fail(`Ωbsk___1 magnifiers must have exactly 1 blank, got ${parts.length - 1} blanks`);
        }
        [nmag_bare_reversed, pmag_bare] = parts;
        if (!this.T.nmag_bare_reversed.isa(nmag_bare_reversed, this.data, {
          chrs: 'nmag_chrs_reversed'
        })) {
          //.......................................................................................................
          // @assign { iam: 'magnifiers', }; debug 'Ωbsk___2', @data
          return this.fail("Ωbsk___3 ???");
        }
        if (!this.T.pmag_bare.isa(pmag_bare, this.data, {
          chrs: 'pmag_chrs'
        })) {
          return this.fail("Ωbsk___4 ???");
        }
        if (!this.T.incremental_text.isa(nmag_bare_reversed + pmag_bare)) {
          return this.fail("Ωbsk___5 ???");
        }
        //.......................................................................................................
        nmag = this[CFG].blank + [...this.data.nmag_chrs_reversed].reverse().join('');
        pmag = this[CFG].blank + pmag_bare;
        nmag_chrs = freeze(Array.from(nmag));
        pmag_chrs = freeze(Array.from(pmag));
        this.assign({nmag, pmag, nmag_chrs, pmag_chrs});
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      static alphabet(x) {
        if (!this.T.incremental_text.isa(x, this.data, {
          chrs: 'alphabet_chrs'
        })) {
          return false;
        }
        this.assign({
          base: this.data.alphabet_chrs.length
        });
        if (!this.T.base.isa(this.data.base)) {
          return this.fail("an alphabet must have 2 chrs or more");
        }
        return true;
      }

      //---------------------------------------------------------------------------------------------------------
      static uniliterals(x) {
        var nun_chrs, nuns, parts, puns, zero, zpun_chrs, zpuns;
        if (!this.T.nonempty_text.isa(x)) {
          return false;
        }
        if (this.T.character.isa(x)) {
          nuns = '';
          zpuns = x;
          nun_chrs = freeze([]);
          zpun_chrs = freeze([x]);
          this.assign({nuns, zpuns, nun_chrs, zpun_chrs});
          return true;
        }
        parts = x.split(this[CFG].blank_splitter);
        if (parts.length !== 3) {
          return this.fail(`Ωbsk___6 uniliterals that are not a single character must have exactly 2 blank2, got ${parts.length - 1} blanks`);
        }
        [nuns, zero, puns] = parts;
        zpuns = zero + puns;
        this.assign({nuns, zpuns});
        if (!this.T.incremental_text.isa(nuns, this.data, {
          chrs: 'nun_chrs'
        })) {
          return false;
        }
        if (!this.T.incremental_text.isa(zpuns, this.data, {
          chrs: 'zpun_chrs'
        })) {
          return false;
        }
        return true;
      }

    };

    //=========================================================================================================
    Hollerith_typespace[CFG] = {
      blank: ' '
    };

    return Hollerith_typespace;

  }).call(this);

  //===========================================================================================================
  _test_monotony = function(x, cmp) {
    var R, chr, chrs, i, idx, prv_chr, ref;
    ({chrs} = this.data); // = @create data
    if (chrs.length === 0) {
      return this.fail("empty is not monotonic");
    }
    if (chrs.length === 1) {
      return true;
    }
    for (idx = i = 1, ref = chrs.length; (1 <= ref ? i < ref : i > ref); idx = 1 <= ref ? ++i : --i) {
      prv_chr = chrs[idx - 1];
      chr = chrs[idx];
      R = (function() {
        switch (cmp) {
          case '>':
            return prv_chr > chr;
          case '<':
            return prv_chr < chr;
          default:
            throw new Error(`Ωbsk___8 (internal) expected '>' or '<', got ${rpr(cmp)}`);
        }
      })();
      if (R) {
        continue;
      }
      this.assign({
        fail: {x, idx, prv_chr, chr}
      });
      return false;
    }
    return true;
  };

  //===========================================================================================================
  Object.assign(module.exports, {
    Hollerith_typespace,
    CFG: CFG,
    internals: {Type, Typespace}
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
