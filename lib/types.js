(function() {
  'use strict';
  var Hollerith_typespace, SFMODULES, Type, Typespace, _test_monotony, clean_assign, debug, hide, nameit, omit, regex, remap, rpr, set_getter, type_of;

  //===========================================================================================================
  SFMODULES = require('bricabrac-single-file-modules');

  ({type_of} = SFMODULES.unstable.require_type_of());

  ({
    show_no_colors: rpr
  } = SFMODULES.unstable.require_show());

  ({debug} = console);

  ({regex} = require('regex'));

  ({hide, set_getter} = SFMODULES.require_managed_property_tools());

  ({nameit} = SFMODULES.require_nameit());

  ({clean_assign} = SFMODULES.unstable.require_clean_assign());

  ({remap, omit} = SFMODULES.unstable.require_remap());

  //===========================================================================================================
  /* NOTE Future Single-File Module */
  Type = class Type {
    //---------------------------------------------------------------------------------------------------------
    constructor(typespace, name, isa) {
      hide(this, 'name', name);
      hide(this, 'T', typespace);
      hide(this, '_isa', isa);
      this.data = {}; // new Bounded_list()
      return void 0;
    }

    //---------------------------------------------------------------------------------------------------------
    isa(x, data = null, mapping = null) {
      var R;
      this.data = {};
      R = this._isa.call(this, x);
      //.......................................................................................................
      if (data != null) {
        if (mapping != null) {
          clean_assign(data, remap(clean_assign({}, this.data), mapping));
        } else {
          /* d1 m1 */          clean_assign(data, this.data);
        }
      } else /* d1 m0 */if (mapping != null) {
        remap(this.data, mapping);
      }
/* d0 m1 */      return R/* d0 m0 */;
    }

    //---------------------------------------------------------------------------------------------------------
    assign(...P) {
      return clean_assign(this.data, ...P);
    }

    //---------------------------------------------------------------------------------------------------------
    fail(message, ...P) {
      clean_assign(this.data, {message}, ...P);
      return false;
    }

  };

  //===========================================================================================================
  Typespace = class Typespace {
    //---------------------------------------------------------------------------------------------------------
    constructor() {
      var Typeclass, clasz, i, isa, len, name, ref;
      clasz = this.constructor;
      ref = Object.getOwnPropertyNames(clasz);
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        Typeclass = class Typeclass extends Type {};
        nameit(name, Typeclass);
        this[name] = new Typeclass(this, name, isa = clasz[name]);
      }
      return void 0;
    }

  };

  //###########################################################################################################
  // HOLLERITH TYPESPACE
  //===========================================================================================================
  Hollerith_typespace = class Hollerith_typespace extends Typespace {
    //=========================================================================================================
    static text(x) {
      return (type_of(x)) === 'text';
    }

    static nonempty_text(x) {
      return (this.T.text.isa(x)) && x.length > 0;
    }

    static float(x) {
      return Number.isFinite(x);
    }

    static integer(x) {
      return Number.isSafeInteger(x);
    }

    static pinteger(x) {
      return (this.T.integer.isa(x)) && x > 0;
    }

    static zpinteger(x) {
      return (this.T.integer.isa(x)) && x >= 0;
    }

    static cardinal(x) {
      return this.T.zpinteger.isa(x);
    }

    //---------------------------------------------------------------------------------------------------------
    static dimension(x) {
      return this.T.pinteger.isa(x);
    }

    //---------------------------------------------------------------------------------------------------------
    static incremental_text(x) {
      if (!this.T.text.isa(x)) {
        return false;
      }
      // @assign { iam: 'incremental_text', }
      this.assign({
        chrs: Array.from(x)
      });
      return _test_monotony.call(this, x, '<');
    }

    //---------------------------------------------------------------------------------------------------------
    static decremental_text(x) {
      if (!this.T.text.isa(x)) {
        return false;
      }
      this.assign({
        chrs: Array.from(x)
      });
      return _test_monotony.call(this, x, '>');
    }

    //---------------------------------------------------------------------------------------------------------
    static nmag_bare_reversed(x) {
      return this.T.incremental_text.isa(x, this.data);
    }

    static pmag_bare(x) {
      return this.T.incremental_text.isa(x, this.data);
    }

    //---------------------------------------------------------------------------------------------------------
    static magnifiers(x) {
      var nmag, nmag_bare_reversed, pmag, pmag_bare;
      if (!this.T.nonempty_text.isa(x)) {
        return this.fail("expected a magnifier, got an empty text");
      }
      [nmag_bare_reversed, pmag_bare] = x.split(/\s+/v);
      if (!this.T.nmag_bare_reversed.isa(nmag_bare_reversed, this.data, {
        chrs: 'nmag_chrs'
      })) {
        //.......................................................................................................
        // @assign { iam: 'magnifiers', }; debug 'Ωbsk___1', @data
        return this.fail("Ωbsk___2 ???");
      }
      if (!this.T.pmag_bare.isa(pmag_bare, this.data, {
        chrs: 'pmag_chrs'
      })) {
        return this.fail("Ωbsk___3 ???");
      }
      if (!this.T.incremental_text.isa(nmag_bare_reversed + pmag_bare)) {
        return this.fail("Ωbsk___4 ???");
      }
      //.......................................................................................................
      nmag = ' ' + this.data.nmag_chrs.reverse().join('');
      pmag = ' ' + pmag_bare;
      this.assign({nmag, pmag});
      return true;
    }

  };

  //===========================================================================================================
  _test_monotony = function(x, cmp) {
    var R, chr, chrs, i, idx, prv_chr, ref;
    ({chrs} = this.data); // = @create data
    if (chrs.length === 0) {
      return this.fail("empty is not monotonic");
    }
    if (chrs.length === 1) {
      return true;
    }
    for (idx = i = 1, ref = chrs.length; (1 <= ref ? i < ref : i > ref); idx = 1 <= ref ? ++i : --i) {
      prv_chr = chrs[idx - 1];
      chr = chrs[idx];
      R = (function() {
        switch (cmp) {
          case '>':
            return prv_chr > chr;
          case '<':
            return prv_chr < chr;
          default:
            throw new Error(`Ωbsk___5 (internal) expected '>' or '<', got ${rpr(cmp)}`);
        }
      })();
      if (R) {
        continue;
      }
      this.assign({
        fail: {x, idx, prv_chr, chr}
      });
      return false;
    }
    return true;
  };

  //===========================================================================================================
  Object.assign(module.exports, {
    types: new Hollerith_typespace(),
    internals: {Type, Typespace, Hollerith_typespace}
  });

  // Bounded_list

}).call(this);

//# sourceMappingURL=data:application/json;base64,
