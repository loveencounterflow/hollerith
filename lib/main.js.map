{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n{ lets\n  freeze }                = require 'letsfreezethat'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass _Hollerith_proto\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: freeze\n    u32_sign_delta:   0x80000000  ### used to lift negative numbers to non-negative                      ###\n    u32_width:        4           ### bytes per element                                                  ###\n    u32_nr_min:       -0x80000000 ### smallest possible VNR element                                      ###\n    u32_nr_max:       +0x7fffffff ### largest possible VNR element                                       ###\n    #.......................................................................................................\n    bcd_dpe:          4           ### digits per element                                                 ###\n    bcd_base:         36          ### number base                                                        ###\n    bcd_plus:         '+'         ### plus symbol, should sort after bcd_minus                           ###\n    bcd_minus:        '!'         ### minus symbol, should sort before bcd_plus                          ###\n    bcd_padder:       '.'         ### used to pad empty fields                                           ###\n    bcd_nr_max:       parseInt '+zzzz', 36\n    bcd_nr_min:       parseInt '-zzzz', 36\n    #.......................................................................................................\n    defaults:\n      hlr_constructor_cfg:\n        vnr_width:    5           ### maximum elements in VNR vector ###\n        validate:     false\n        # autoextend: false\n        format:       'u32'\n\n  #---------------------------------------------------------------------------------------------------------\n  @create_types: ( instance ) ->\n    types = new ( require 'intertype' ).Intertype()\n    #.......................................................................................................\n    types.declare 'hlr_constructor_cfg', tests:\n      \"x is a object\":                    ( x ) -> @isa.object x\n      \"@isa.cardinal x.vnr_width\":        ( x ) -> @isa.cardinal x.vnr_width\n      \"@isa.boolean x.validate\":          ( x ) -> @isa.boolean x.validate\n      \"x.format in [ 'u32', 'bcd', ]\":    ( x ) -> x.format in [ 'u32', 'bcd', ]\n    types.validate.hlr_constructor_cfg instance.cfg\n    #.......................................................................................................\n    types.declare 'hlr_vnr', ( x ) ->\n      ### TAINT check bounds of elements ###\n      return false unless @isa.nonempty_list x\n      return x.every ( xx ) => @isa.positive_integer xx\n    #.......................................................................................................\n    return types\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg    = { @constructor.C.defaults.hlr_constructor_cfg..., cfg..., }\n    @types  = @constructor.create_types @\n    @cfg    = freeze @cfg\n    return undefined\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use separate class? for validation to eschew extra call on each use ###\nclass @Hollerith extends _Hollerith_proto\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super cfg\n    @encode = switch @cfg.format\n      when 'u32' then @_encode_u32\n      when 'bcd' then @_encode_bcd\n    return undefined\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _encode_u32: ( vnr ) =>\n    ### Observe that we limit all VNR elements to `[ u32_nr_max .. u32_nr_min ]` so numbers outside that\n    range will no longer cause an error. Clients will have to check for boundaries somewhere else if they\n    so wish. ###\n    @types.validate.vnr vnr if @cfg.validate\n    unless 0 < vnr.length <= @cfg.vnr_width\n      throw new Error \"^44798^ expected VNR to be between 1 and #{@cfg.vnr_width} elements long, got length #{vnr.length}\"\n    R       = Buffer.alloc @cfg.vnr_width * C.u32_width, 0x00 ### TAINT pre-compute constant ###\n    offset  = -C.u32_width\n    for idx in [ 0 ... @cfg.vnr_width ]\n      nr = vnr[ idx ] ? 0\n      nr = Math.min nr, @constructor.C.u32_nr_max\n      nr = Math.max nr, @constructor.C.u32_nr_min\n      R.writeUInt32BE nr + C.u32_sign_delta, ( offset += C.u32_width )\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _encode_bcd: ( vnr ) =>\n    @types.validate.vnr vnr if @cfg.validate\n    R = []\n    for idx in [ 0 ... @cfg.vnr_width ]\n      nr    = vnr[ idx ] ? 0\n      sign  = if nr >= 0 then C.bcd_plus else C.bcd_minus\n      nr    = Math.min nr, @constructor.C.bcd_nr_max\n      nr    = Math.max nr, @constructor.C.bcd_nr_min\n      R.push sign + ( ( Math.abs nr ).toString C.bcd_base ).padStart C.bcd_dpe, C.bcd_padder\n    return R.join ','\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  new_vnr: ( source = null ) =>\n    return [ 0, ] unless source?\n    @types.validate.vnr source if @cfg.validate\n    return [ source..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  deepen: ( vnr, nr = 0 ) =>\n    ### Given a vectorial line number `vnr`, return a copy of `vnr`, call it\n    `vnr0`, which has an index of `0` appended, thus representing the pre-first `vnr` for a level of lines\n    derived from the one that the original `vnr` pointed to. ###\n    @types.validate.vnr vnr if @cfg.validate\n    return [ vnr..., nr, ]\n\n  #---------------------------------------------------------------------------------------------------------\n  advance:  ( vnr ) => @move vnr, +1\n  recede:   ( vnr ) => @move vnr, -1\n\n  #---------------------------------------------------------------------------------------------------------\n  move: ( vnr, delta ) =>\n    ### Given a vectorial line number `vnr`, return a copy of `vnr`, call it\n    `vnr0`, which has its last index incremented by `1`, thus representing the vectorial line number of the\n    next line in the same level that is derived from the same line as its predecessor. ###\n    if @cfg.validate\n      @types.validate.vnr vnr\n      @types.validate.integer delta\n    R                   = [ vnr..., ]\n    R[ vnr.length - 1 ]  += delta\n    return R\n\n\n  #=========================================================================================================\n  # SORTING\n  #---------------------------------------------------------------------------------------------------------\n  cmp_blobs: ( a, b ) => a.compare b\n\n  #---------------------------------------------------------------------------------------------------------\n  cmp: ( a, b ) =>\n    if @cfg.validate\n      @types.validate.vnr a\n      @types.validate.vnr b\n    for idx in [ 0 ... ( Math.max a.length, b.length ) ]\n      ai = a[ idx ] ? 0\n      bi = b[ idx ] ? 0\n      return -1 if ai < bi\n      return +1 if ai > bi\n    return 0\n\n  #---------------------------------------------------------------------------------------------------------\n  sort_blobs: ( vnr_blobs ) =>\n    ### Given a list of VNRs, return a copy of the list with the VNRs lexicographically sorted. ###\n    if @cfg.validate\n      @types.validate.list vnr_blobs\n    return [ vnr_blobs..., ].sort ( a, b ) => a.compare b\n\n  #---------------------------------------------------------------------------------------------------------\n  sort: ( vnrs ) =>\n    ### Given a list of VNRs, return a copy of the list with the VNRs lexicographically sorted. ###\n    if @cfg.validate\n      @types.validate.list vnrs\n    return [ vnrs..., ].sort @cmp\n\n\n#===========================================================================================================\nC           = _Hollerith_proto.C\n@Hollerith  = freeze @Hollerith\n@HOLLERITH  = new @Hollerith()\n\n\n"
  ]
}