{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH-CODEC/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  cast\n  declare\n  size_of\n  type_of }               = @types\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ 'typemarkers' ]  = {}\n#...........................................................................................................\ntm_lo               = @[ 'typemarkers'  ][ 'lo'         ] = 0x00\ntm_null             = @[ 'typemarkers'  ][ 'null'       ] = 'B'.codePointAt 0 # 0x42\ntm_false            = @[ 'typemarkers'  ][ 'false'      ] = 'C'.codePointAt 0 # 0x43\ntm_true             = @[ 'typemarkers'  ][ 'true'       ] = 'D'.codePointAt 0 # 0x44\ntm_list             = @[ 'typemarkers'  ][ 'list'       ] = 'E'.codePointAt 0 # 0x45\ntm_date             = @[ 'typemarkers'  ][ 'date'       ] = 'G'.codePointAt 0 # 0x47\ntm_ninfinity        = @[ 'typemarkers'  ][ 'ninfinity'  ] = 'J'.codePointAt 0 # 0x4a\ntm_nnumber          = @[ 'typemarkers'  ][ 'nnumber'    ] = 'K'.codePointAt 0 # 0x4b\ntm_pnumber          = @[ 'typemarkers'  ][ 'pnumber'    ] = 'L'.codePointAt 0 # 0x4c\ntm_pinfinity        = @[ 'typemarkers'  ][ 'pinfinity'  ] = 'M'.codePointAt 0 # 0x4d\n# tm_set              = @[ 'typemarkers'  ][ 'set'        ] = 'S'.codePointAt 0 # 0x53\ntm_text             = @[ 'typemarkers'  ][ 'text'       ] = 'T'.codePointAt 0 # 0x54\ntm_private          = @[ 'typemarkers'  ][ 'private'    ] = 'Z'.codePointAt 0 # 0x5a\ntm_hi               = @[ 'typemarkers'  ][ 'hi'         ] = 0xff\n\n#-----------------------------------------------------------------------------------------------------------\n@[ 'bytecounts' ]     = {}\nbytecount_singular    = @[ 'bytecounts'   ][ 'singular'   ] = 1\nbytecount_typemarker  = @[ 'bytecounts'   ][ 'typemarker' ] = 1\nbytecount_number      = @[ 'bytecounts'   ][ 'number'     ] = 9\nbytecount_date        = @[ 'bytecounts'   ][ 'date'       ] = bytecount_number + 1\n\n#-----------------------------------------------------------------------------------------------------------\n@[ 'sentinels' ]  = {}\n#...........................................................................................................\n### http://www.merlyn.demon.co.uk/js-datex.htm ###\n@[ 'sentinels' ][ 'firstdate' ] = new Date -8640000000000000\n@[ 'sentinels' ][ 'lastdate'  ] = new Date +8640000000000000\n\n#-----------------------------------------------------------------------------------------------------------\n@[ 'keys' ]  = {}\n#...........................................................................................................\n@[ 'keys' ][ 'lo' ] = new Buffer [ @[ 'typemarkers' ][ 'lo' ] ]\n@[ 'keys' ][ 'hi' ] = new Buffer [ @[ 'typemarkers' ][ 'hi' ] ]\n\n#-----------------------------------------------------------------------------------------------------------\n@[ 'symbols' ]  = {}\nsymbol_fallback = @[ 'fallback' ] = Symbol 'fallback'\n\n\n#===========================================================================================================\n# RESULT BUFFER (RBUFFER)\n#-----------------------------------------------------------------------------------------------------------\nrbuffer_min_size        = 1024\nrbuffer_max_size        = 65536\nrbuffer                 = new Buffer rbuffer_min_size\n\n#-----------------------------------------------------------------------------------------------------------\ngrow_rbuffer = ->\n  factor      = 2\n  new_size    = Math.floor rbuffer.length * factor + 0.5\n  # warn \"µ44542 growing rbuffer to #{new_size} bytes\"\n  new_result_buffer = new Buffer new_size\n  rbuffer.copy new_result_buffer\n  rbuffer           = new_result_buffer\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nrelease_extraneous_rbuffer_bytes = ->\n  if rbuffer.length > rbuffer_max_size\n    # warn \"µ44543 shrinking rbuffer to #{rbuffer_max_size} bytes\"\n    rbuffer = new Buffer rbuffer_max_size\n  return null\n\n\n#===========================================================================================================\n# VARIANTS\n#-----------------------------------------------------------------------------------------------------------\n@write_singular = ( idx, value ) ->\n  grow_rbuffer() until rbuffer.length >= idx + bytecount_singular\n  if      value is null   then typemarker = tm_null\n  else if value is false  then typemarker = tm_false\n  else if value is true   then typemarker = tm_true\n  else throw new Error \"µ56733 unable to encode value of type #{type_of value}\"\n  rbuffer[ idx ] = typemarker\n  return idx + bytecount_singular\n\n#-----------------------------------------------------------------------------------------------------------\n@read_singular = ( buffer, idx ) ->\n  switch typemarker = buffer[ idx ]\n    when tm_null  then value = null\n    when tm_false then value = false\n    when tm_true  then value = true\n    else throw new Error \"µ57564 unable to decode 0x#{typemarker.toString 16} at index #{idx} (#{rpr buffer})\"\n  return [ idx + bytecount_singular, value, ]\n\n\n#===========================================================================================================\n# PRIVATES\n#-----------------------------------------------------------------------------------------------------------\n@write_private = ( idx, value, encoder ) ->\n  grow_rbuffer() until rbuffer.length >= idx + 3 * bytecount_typemarker\n  #.........................................................................................................\n  rbuffer[ idx ]  = tm_private\n  idx            += bytecount_typemarker\n  #.........................................................................................................\n  rbuffer[ idx ]  = tm_list\n  idx            += bytecount_typemarker\n  #.........................................................................................................\n  type            = value[ 'type'  ] ? 'private'\n  proper_value    = value[ 'value' ]\n  #.........................................................................................................\n  if encoder?\n    encoded_value   = encoder type, proper_value, symbol_fallback\n    proper_value    = encoded_value unless encoded_value is symbol_fallback\n  #.........................................................................................................\n  else if type.startsWith '-'\n    ### Built-in private types ###\n    switch type\n      when '-set'\n        null # already dealt with in `write`\n      else\n        throw new Error \"µ58395 unknown built-in private type #{rpr type}\"\n  #.........................................................................................................\n  wrapped_value   = [ type, proper_value, ]\n  idx             = @_encode wrapped_value, idx\n  #.........................................................................................................\n  rbuffer[ idx ]  = tm_lo\n  idx            += bytecount_typemarker\n  #.........................................................................................................\n  return idx\n\n#-----------------------------------------------------------------------------------------------------------\n@read_private = ( buffer, idx, decoder ) ->\n  idx                        += bytecount_typemarker\n  [ idx, [ type,  value, ] ]  = @read_list buffer, idx\n  #.........................................................................................................\n  if decoder?\n    R = decoder type, value, symbol_fallback\n    throw new Error \"µ59226 encountered illegal value `undefined` when reading private type\" if R is undefined\n    R = { type, value, } if R is symbol_fallback\n  #.........................................................................................................\n  else if type.startsWith '-'\n    ### Built-in private types ###\n    switch type\n      when '-set'\n        ### TAINT wasting bytes because wrapped twice ###\n        R = new Set value[ 0 ]\n      else\n        throw new Error \"µ60057 unknown built-in private type #{rpr type}\"\n  #.........................................................................................................\n  else\n    R = { type, value, }\n  return [ idx, R, ]\n\n\n#===========================================================================================================\n# NUMBERS\n#-----------------------------------------------------------------------------------------------------------\n@write_number = ( idx, number ) ->\n  grow_rbuffer() until rbuffer.length >= idx + bytecount_number\n  if number < 0\n    type    = tm_nnumber\n    number  = -number\n  else\n    type    = tm_pnumber\n  rbuffer[ idx ] = type\n  rbuffer.writeDoubleBE number, idx + 1\n  @_invert_buffer rbuffer, idx if type is tm_nnumber\n  return idx + bytecount_number\n\n#-----------------------------------------------------------------------------------------------------------\n@write_infinity = ( idx, number ) ->\n  grow_rbuffer() until rbuffer.length >= idx + bytecount_singular\n  rbuffer[ idx ] = if number is -Infinity then tm_ninfinity else tm_pinfinity\n  return idx + bytecount_singular\n\n#-----------------------------------------------------------------------------------------------------------\n@read_nnumber = ( buffer, idx ) ->\n  throw new Error \"µ60888 not a negative number at index #{idx}\" unless buffer[ idx ] is tm_nnumber\n  copy = @_invert_buffer ( new Buffer buffer.slice idx, idx + bytecount_number ), 0\n  return [ idx + bytecount_number, -( copy.readDoubleBE 1 ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@read_pnumber = ( buffer, idx ) ->\n  throw new Error \"µ61719 not a positive number at index #{idx}\" unless buffer[ idx ] is tm_pnumber\n  return [ idx + bytecount_number, buffer.readDoubleBE idx + 1, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_invert_buffer = ( buffer, idx ) ->\n  buffer[ i ] = ~buffer[ i ] for i in [ idx + 1 .. idx + 8 ]\n  return buffer\n\n\n#===========================================================================================================\n# DATES\n#-----------------------------------------------------------------------------------------------------------\n@write_date = ( idx, date ) ->\n  grow_rbuffer() until rbuffer.length >= idx + bytecount_date\n  number          = +date\n  rbuffer[ idx ]  = tm_date\n  return @write_number idx + 1, number\n\n#-----------------------------------------------------------------------------------------------------------\n@read_date = ( buffer, idx ) ->\n  throw new Error \"µ62550 not a date at index #{idx}\" unless buffer[ idx ] is tm_date\n  switch type = buffer[ idx + 1 ]\n    when tm_nnumber    then [ idx, value, ] = @read_nnumber    buffer, idx + 1\n    when tm_pnumber    then [ idx, value, ] = @read_pnumber    buffer, idx + 1\n    else throw new Error \"µ63381 unknown date type marker 0x#{type.toString 16} at index #{idx}\"\n  return [ idx, ( new Date value ), ]\n\n\n#===========================================================================================================\n# TEXTS\n#-----------------------------------------------------------------------------------------------------------\n@write_text = ( idx, text ) ->\n  text                                = text.replace /\\x01/g, '\\x01\\x02'\n  text                                = text.replace /\\x00/g, '\\x01\\x01'\n  bytecount_text                      = ( Buffer.byteLength text, 'utf-8' ) + 2\n  grow_rbuffer() until rbuffer.length >= idx + bytecount_text\n  rbuffer[ idx ]                      = tm_text\n  rbuffer.write text, idx + 1\n  rbuffer[ idx + bytecount_text - 1 ] = tm_lo\n  return idx + bytecount_text\n\n#-----------------------------------------------------------------------------------------------------------\n@read_text = ( buffer, idx ) ->\n  # urge '©J2d6R', buffer[ idx ], buffer[ idx ] is tm_text\n  throw new Error \"µ64212 not a text at index #{idx}\" unless buffer[ idx ] is tm_text\n  stop_idx = idx\n  loop\n    stop_idx += +1\n    break if ( byte = buffer[ stop_idx ] ) is tm_lo\n    throw new Error \"µ65043 runaway string at index #{idx}\" unless byte?\n  R = buffer.toString 'utf-8', idx + 1, stop_idx\n  R = R.replace /\\x01\\x01/g, '\\x00'\n  R = R.replace /\\x01\\x02/g, '\\x01'\n  return [ stop_idx + 1, R, ]\n\n\n#===========================================================================================================\n# LISTS\n#-----------------------------------------------------------------------------------------------------------\n@read_list = ( buffer, idx ) ->\n  throw new Error \"µ65874 not a list at index #{idx}\" unless buffer[ idx ] is tm_list\n  R     = []\n  idx  += +1\n  loop\n    break if ( byte = buffer[ idx ] ) is tm_lo\n    [ idx, value, ] = @_decode buffer, idx, true\n    R.push value[ 0 ]\n    throw new Error \"µ66705 runaway list at index #{idx}\" unless byte?\n  return [ idx + 1, R, ]\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@write = ( idx, value, encoder ) ->\n  switch type = type_of value\n    when 'text'       then return @write_text     idx, value\n    when 'number'     then return @write_number   idx, value\n    when 'infinity'   then return @write_infinity idx, value\n    when 'date'       then return @write_date     idx, value\n    #.......................................................................................................\n    when 'set'\n      ### TAINT wasting bytes because wrapped too deep ###\n      return @write_private  idx, { type: '-set', value: [ ( Array.from value ), ], }\n  #.........................................................................................................\n  return @write_private  idx, value, encoder if isa.object value\n  return @write_singular idx, value\n\n\n#===========================================================================================================\n# PUBLIC API\n#-----------------------------------------------------------------------------------------------------------\n@encode = ( key, encoder ) ->\n  rbuffer.fill 0x00\n  throw new Error \"µ67536 expected a list, got a #{type}\" unless ( type = type_of key ) is 'list'\n  idx = @_encode key, 0, encoder\n  R   = new Buffer idx\n  rbuffer.copy R, 0, 0, idx\n  release_extraneous_rbuffer_bytes()\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@encode_plus_hi = ( key, encoder ) ->\n  ### TAINT code duplication ###\n  rbuffer.fill 0x00\n  throw new Error \"µ68367 expected a list, got a #{type}\" unless ( type = type_of key ) is 'list'\n  idx             = @_encode key, 0, encoder\n  grow_rbuffer() until rbuffer.length >= idx + 1\n  rbuffer[ idx ]  = tm_hi\n  idx            += +1\n  R               = new Buffer idx\n  rbuffer.copy R, 0, 0, idx\n  release_extraneous_rbuffer_bytes()\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_encode = ( key, idx, encoder ) ->\n  last_element_idx = key.length - 1\n  for element, element_idx in key\n    try\n      if isa.list element\n        rbuffer[ idx ]  = tm_list\n        idx            += +1\n        for sub_element in element\n          idx = @_encode [ sub_element, ], idx, encoder\n        rbuffer[ idx ]  = tm_lo\n        idx            += +1\n      else\n        idx = @write idx, element, encoder\n    catch error\n      key_rpr = []\n      for element in key\n        if isa.buffer element\n          throw new Error \"µ45533 unable to encode buffers\"\n          # key_rpr.push \"#{@rpr_of_buffer element, key[ 2 ]}\"\n        else\n          key_rpr.push rpr element\n      warn \"µ44544 detected problem with key [ #{rpr key_rpr.join ', '} ]\"\n      throw error\n  #.........................................................................................................\n  return idx\n\n#-----------------------------------------------------------------------------------------------------------\n@decode = ( buffer, decoder ) ->\n  return ( @_decode buffer, 0, false, decoder )[ 1 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_decode = ( buffer, idx, single, decoder ) ->\n  R         = []\n  last_idx  = buffer.length - 1\n  loop\n    break if idx > last_idx\n    switch type = buffer[ idx ]\n      when tm_list       then [ idx, value, ] = @read_list       buffer, idx\n      when tm_text       then [ idx, value, ] = @read_text       buffer, idx\n      when tm_nnumber    then [ idx, value, ] = @read_nnumber    buffer, idx\n      when tm_ninfinity  then [ idx, value, ] = [ idx + 1, -Infinity, ]\n      when tm_pnumber    then [ idx, value, ] = @read_pnumber    buffer, idx\n      when tm_pinfinity  then [ idx, value, ] = [ idx + 1, +Infinity, ]\n      when tm_date       then [ idx, value, ] = @read_date       buffer, idx\n      when tm_private    then [ idx, value, ] = @read_private    buffer, idx, decoder\n      else                    [ idx, value, ] = @read_singular   buffer, idx\n    R.push value\n    break if single\n  #.........................................................................................................\n  return [ idx, R ]\n\n\n# debug ( require './dump' ).@rpr_of_buffer null, buffer = @encode [ 'aaa', [], ]\n# debug '©tP5xQ', @decode buffer\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@encodings =\n\n  #.........................................................................................................\n  dbcs2: \"\"\"\n    ⓪①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳㉑㉒㉓㉔㉕㉖㉗㉘㉙㉚㉛\n    ㉜！＂＃＄％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？\n    ＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿\n    ｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝～㉠\n    ㉝㉞㉟㊱㊲㊳㊴㊵㊶㊷㊸㊹㊺㊻㊼㊽㊾㊿㋐㋑㋒㋓㋔㋕㋖㋗㋘㋙㋚㋛㋜㋝\n    ㋞㋟㋠㋡㋢㋣㋤㋥㋦㋧㋨㋩㋪㋫㋬㋭㋮㋯㋰㋱㋲㋳㋴㋵㋶㋷㋸㋹㋺㋻㋼㋽\n    ㋾㊊㊋㊌㊍㊎㊏㊐㊑㊒㊓㊔㊕㊖㊗㊘㊙㊚㊛㊜㊝㊞㊟㊠㊡㊢㊣㊤㊥㊦㊧㊨\n    ㊩㊪㊫㊬㊭㊮㊯㊰㊀㊁㊂㊃㊄㊅㊆㊇㊈㊉㉈㉉㉊㉋㉌㉍㉎㉏⓵⓶⓷⓸⓹〓\n    \"\"\"\n  #.........................................................................................................\n  aleph: \"\"\"\n    БДИЛЦЧШЭЮƆƋƏƐƔƥƧƸψŐőŒœŊŁłЯɔɘɐɕəɞ\n    ␣!\"#$%&'()*+,-./0123456789:;<=>?\n    @ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_\n    `abcdefghijklmnopqrstuvwxyz{|}~ω\n    ΓΔΘΛΞΠΣΦΨΩαβγδεζηθικλμνξπρςστυφχ\n    Ж¡¢£¤¥¦§¨©ª«¬Я®¯°±²³´µ¶·¸¹º»¼½¾¿\n    ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß\n    àáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\n    \"\"\"\n  #.........................................................................................................\n  rdctn: \"\"\"\n    ∇≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\n    ␣!\"#$%&'()*+,-./0123456789:;<=>?\n    @ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_\n    `abcdefghijklmnopqrstuvwxyz{|}~≡\n    ∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃\n    ∃∃¢£¤¥¦§¨©ª«¬Я®¯°±²³´µ¶·¸¹º»¼½¾¿\n    ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß\n    àáâãäåæçèéêëìíîïðñò≢≢≢≢≢≢≢≢≢≢≢≢Δ\n    \"\"\"\n\n\n#-----------------------------------------------------------------------------------------------------------\n@rpr_of_buffer = ( buffer, encoding = 'rdctn' ) ->\n  return ( rpr buffer ) + ' ' +  @_encode_buffer buffer, encoding\n\n#-----------------------------------------------------------------------------------------------------------\n@_encode_buffer = ( buffer, encoding = 'rdctn' ) ->\n  ### TAINT use switch, emit error if `encoding` not list or known key ###\n  encoding = @encodings[ encoding ] unless isa.list encoding\n  return ( encoding[ buffer[ idx ] ] for idx in [ 0 ... buffer.length ] ).join ''\n\n#-----------------------------------------------------------------------------------------------------------\n@_compile_encodings = ->\n  #.........................................................................................................\n  chrs_of = ( text ) ->\n    text = text.split /([\\ud800-\\udbff].|.)/\n    return ( chr for chr in text when chr isnt '' )\n  #.........................................................................................................\n  for name, encoding of @encodings\n    encoding = chrs_of encoding.replace /\\n+/g, ''\n    unless ( length = encoding.length ) is 256\n      throw new Error \"µ69198 expected 256 characters, found #{length} in encoding #{rpr name}\"\n    @encodings[ name ] = encoding\n  return null\n@_compile_encodings()\n\n#-----------------------------------------------------------------------------------------------------------\n@as_sortline = ( key, settings ) ->\n  joiner      = settings?[ 'joiner'     ] ? ' '\n  base        = settings?[ 'base'       ] ? 0x2800\n  stringify   = settings?[ 'stringify'  ] ? JSON.stringify\n  bare        = settings?[ 'bare'       ] ? no\n  buffer      = @encode key\n  buffer_txt  = ( String.fromCodePoint base + buffer[ idx ] for idx in [ 0 ... buffer.length ] ).join ''\n  return buffer_txt if bare\n  return buffer_txt + joiner + stringify key\n\n\n\n\n\n"
  ]
}