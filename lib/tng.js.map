{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/tng.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA,aAAA;;;;EAMM,IAAC,CAAA,kBAAP,MAAA,gBAAA,CAAA;;IAGE,WAAa,CAAA,CAAA;MACX,IAAC,CAAA,UAAD,GAAe,UAAY;MAC3B,IAAC,CAAA,SAAD,GAAe,CAAY;MAC3B,IAAC,CAAA,SAAD,GAAe,CAAY;MAC3B,IAAC,CAAA,MAAD,GAAe,CAAC,UAAW;MAC3B,IAAC,CAAA,MAAD,GAAe,CAAC,UAAW;AAC3B,aAAO;IANI,CADf;;;IAUE,MAAQ,CAAE,GAAF,CAAA;AACV,UAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,MAE6D,gCAF7D,EAAA,GAAA,EAAA,IAAA,EAAA;MAAI,MAAO,CAAA,CAAA,UAAI,GAAG,CAAC,OAAR,OAAA,IAAkB,IAAC,CAAA,SAAnB,EAAP;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,yCAAA,CAAA,CAA4C,IAAC,CAAA,SAA7C,CAAA,2BAAA,CAAA,CAAoF,GAAG,CAAC,MAAxF,CAAA,CAAV,EADR;;MAEA,CAAA,GAAc,MAAM,CAAC,KAAP,CAAa,IAAC,CAAA,SAAD,GAAa,IAAC,CAAA,SAA3B,EAAsC,IAAtC;MACd,MAAA,GAAc,CAAC,IAAC,CAAA;MAChB,KAAW,kGAAX;QACE,CAAC,CAAC,aAAF,CAAgB,oCAAe,CAAf,CAAA,GAAqB,IAAC,CAAA,UAAtC,EAAkD,CAAE,MAAA,IAAU,IAAC,CAAA,SAAb,CAAlD;MADF;AAEA,aAAO;IAPD,CAVV;;;IAoBE,WAAa,CAAE,GAAF,CAAA;AACf,UAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;MAAI,SAAA,GAAc,CAAY;MAC1B,GAAA,GAAc,CAAY;MAC1B,IAAA,GAAc;MACd,IAAA,GAAc;MACd,KAAA,GAAc;MACd,MAAA,GAAc;MACd,CAAA,GAAc;MACd,KAAW,wFAAX;QACE,EAAA,sCAAqB;QACrB,IAAA,GAAW,EAAA,IAAM,CAAT,GAAgB,IAAhB,GAA0B;QAClC,CAAC,CAAC,IAAF,CAAO,IAAA,GAAO,CAAE,CAAE,IAAI,CAAC,GAAL,CAAS,EAAT,CAAF,CAAe,CAAC,QAAhB,CAAyB,IAAzB,CAAF,CAAiC,CAAC,QAAlC,CAA2C,GAA3C,EAAgD,MAAhD,CAAd;MAHF;MAIA,CAAA,GAAc,CAAC,CAAC,IAAF,CAAO,GAAP;AACd,aAAO;IAbI;;EAtBf,EANA;;;EA4CA,IAAC,CAAA,eAAD,GAAmB,IAAI,IAAC,CAAA,eAAL,CAAA;AA5CnB",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n#===========================================================================================================\n# \n#-----------------------------------------------------------------------------------------------------------\nclass @Hollerith_codec\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @sign_delta  = 0x80000000  ### used to lift negative numbers to non-negative ###\n    @u32_width   = 4           ### bytes per element ###\n    @vnr_width   = 5           ### maximum elements in VNR vector ###\n    @nr_min      = -0x80000000 ### smallest possible VNR element ###\n    @nr_max      = +0x7fffffff ### largest possible VNR element ###\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  encode: ( vnr ) ->\n    unless 0 < vnr.length <= @vnr_width\n      throw new Error \"^44798^ expected VNR to be between 1 and #{@vnr_width} elements long, got length #{vnr.length}\"\n    R           = Buffer.alloc @vnr_width * @u32_width, 0x00 ### TAINT pre-compute constant ###\n    offset      = -@u32_width\n    for idx in [ 0 ... @vnr_width ]\n      R.writeUInt32BE ( vnr[ idx ] ? 0 ) + @sign_delta, ( offset += @u32_width )\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _encode_bcd: ( vnr ) ->\n    vnr_width   = 5           ### maximum elements in VNR vector ###\n    dpe         = 4           ### digits per element ###\n    base        = 36\n    plus        = '+'\n    minus       = '!'\n    padder      = '.'\n    R           = []\n    for idx in [ 0 ... vnr_width ]\n      nr    = vnr[ idx ] ? 0\n      sign  = if nr >= 0 then plus else minus\n      R.push sign + ( ( Math.abs nr ).toString base ).padStart dpe, padder\n    R           = R.join ','\n    return R\n\n#===========================================================================================================\n@HOLLERITH_CODEC = new @Hollerith_codec()\n\n\n\n"
  ]
}