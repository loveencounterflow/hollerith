{"version":3,"sources":["tests.coffee"],"names":[],"mappings":"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","file":"tests.js","sourceRoot":"/source/","sourcesContent":["\n\n############################################################################################################\n# njs_path                  = require 'path'\n# # njs_fs                    = require 'fs'\n# join                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH-CODEC/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# suspend                   = require 'coffeenode-suspend'\n# step                      = suspend.step\n# ### TAINT experimentally using `later` in place of `setImmediate` ###\n# later                     = suspend.immediately\n#...........................................................................................................\ntest                      = require 'guy-test'\nCODEC                     = require './main'\nƒ                         = CND.format_number\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"codec encodes and decodes numbers\" ] = ( T ) ->\n  key     = [ 'foo', 1234, 5678, ]\n  key_bfr = CODEC.encode key\n  T.eq key, CODEC.decode key_bfr\n  whisper \"key length: #{key_bfr.length}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"codec encodes and decodes dates\" ] = ( T ) ->\n  key     = [ 'foo', ( new Date() ), 5678, ]\n  key_bfr = CODEC.encode key\n  T.eq key, CODEC.decode key_bfr\n  whisper \"key length: #{key_bfr.length}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"codec accepts long numbers\" ] = ( T ) ->\n  key     = [ 'foo', ( i for i in [ 0 .. 1000 ] ), 'bar', ]\n  key_bfr = CODEC.encode key\n  T.eq key, CODEC.decode key_bfr\n  whisper \"key length: #{key_bfr.length}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"codec accepts long texts\" ] = ( T ) ->\n  long_text   = ( new Array 1e4 ).join '#'\n  key         = [ 'foo', [ long_text, long_text, long_text, long_text, ], 42, ]\n  key_bfr     = CODEC.encode key\n  T.eq key, CODEC.decode key_bfr\n  whisper \"key length: #{key_bfr.length}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"codec accepts private type (1)\" ] = ( T ) ->\n  key         = [ { type: 'price', value: 'abc', }, ]\n  key_bfr     = CODEC.encode key\n  debug '©ehT4A', key\n  debug '©ialgj', CODEC.rpr_of_buffer key_bfr\n  debug '©XCwLq', CODEC.decode key_bfr\n  T.eq key, CODEC.decode key_bfr\n  whisper \"key length: #{key_bfr.length}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"codec accepts private type (2)\" ] = ( T ) ->\n  key         = [ { type: 'price', value: 'abc', }, 'xxx', ]\n  key_bfr     = CODEC.encode key\n  debug '©ehT4A', key\n  debug '©ialgj', CODEC.rpr_of_buffer key_bfr\n  debug '©ialgj', CODEC.rpr_of_buffer CODEC.encode [ 'price', 'abc' ]\n  debug '©ialgj', CODEC.rpr_of_buffer CODEC.encode [ [ 'price', 'abc' ], 'xxx', ]\n  debug '©XCwLq', CODEC.decode key_bfr\n  T.eq key, CODEC.decode key_bfr\n  whisper \"key length: #{key_bfr.length}\"\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"codec decodes private type with custom decoder\" ] = ( T ) ->\n#   value         = 'some/file/route'\n#   encoded_value = value.split '/'\n#   key         = [ 'foo', { type: 'route', value: encoded_value, }, 'bar', ]\n#   key_bfr     = CODEC.encode key\n#   # CODEC.wrap 'route', [ 'foo', 'bar', ]\n#   # CODEC.unwrap { type: 'route', value: [ 'foo', 'bar', ], }\n#   # debug '©ehT4A', key\n#   # debug '©ialgj', CODEC.rpr_of_buffer key_bfr\n#   debug '©XCwLq', CODEC.decode key_bfr\n#   T.eq key, CODEC.decode key_bfr\n#   whisper \"key length: #{key_bfr.length}\"\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_main = ->\n  test @, 'timeout': 2500\n\n\n\n\n\n\n\n"]}