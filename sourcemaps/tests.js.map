{"version":3,"sources":["tests.coffee"],"names":[],"mappings":"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","file":"tests.js","sourceRoot":"/source/","sourcesContent":["\n\n############################################################################################################\n# njs_path                  = require 'path'\n# # njs_fs                    = require 'fs'\n# join                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH-CODEC/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# suspend                   = require 'coffeenode-suspend'\n# step                      = suspend.step\n# ### TAINT experimentally using `later` in place of `setImmediate` ###\n# later                     = suspend.immediately\n#...........................................................................................................\ntest                      = require 'guy-test'\nCODEC                     = require './main'\nÆ’                         = CND.format_number\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"codec encodes and decodes numbers\" ] = ( T ) ->\n  key     = [ 'foo', 1234, 5678, ]\n  key_bfr = CODEC.encode key\n  T.eq key, CODEC.decode key_bfr\n  whisper \"key length: #{key_bfr.length}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"codec encodes and decodes dates\" ] = ( T ) ->\n  key     = [ 'foo', ( new Date() ), 5678, ]\n  key_bfr = CODEC.encode key\n  T.eq key, CODEC.decode key_bfr\n  whisper \"key length: #{key_bfr.length}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"codec accepts long numbers\" ] = ( T ) ->\n  key     = [ 'foo', ( i for i in [ 0 .. 1000 ] ), 'bar', ]\n  key_bfr = CODEC.encode key\n  T.eq key, CODEC.decode key_bfr\n  whisper \"key length: #{key_bfr.length}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"codec accepts long texts\" ] = ( T ) ->\n  long_text   = ( new Array 1e4 ).join '#'\n  key         = [ 'foo', [ long_text, long_text, long_text, long_text, ], 42, ]\n  key_bfr     = CODEC.encode key\n  T.eq key, CODEC.decode key_bfr\n  whisper \"key length: #{key_bfr.length}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"codec accepts private type (1)\" ] = ( T ) ->\n  key         = [ { type: 'price', value: 'abc', }, ]\n  key_bfr     = CODEC.encode key\n  T.eq key, CODEC.decode key_bfr\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"codec accepts private type (2)\" ] = ( T ) ->\n  key         = [ 123, 456, { type: 'price', value: 'abc', }, 'xxx', ]\n  key_bfr     = CODEC.encode key\n  T.eq key, CODEC.decode key_bfr\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"codec decodes private type with custom decoder (1)\" ] = ( T ) ->\n  value         = '/etc/cron.d/anacron'\n  matcher       = [ value, ]\n  encoded_value = value.split '/'\n  key           = [ { type: 'route', value: encoded_value, }, ]\n  key_bfr       = CODEC.encode key\n  #.........................................................................................................\n  decoded_key   = CODEC.decode key_bfr, ( type, value ) ->\n    return value.join '/' if type is 'route'\n    throw new Error \"unknown private type #{rpr type}\"\n  #.........................................................................................................\n  # debug CODEC.rpr_of_buffer key_bfr\n  # debug CODEC.decode key_bfr\n  # debug decoded_key\n  T.eq matcher, decoded_key\n\n#-----------------------------------------------------------------------------------------------------------\n@_sets_are_equal = ( a, b ) ->\n  ### TAINT doen't work for (sub-) elements that are sets or maps ###\n  return false unless ( CND.isa a, 'set' ) and ( CND.isa b, 'set' )\n  return false unless a.size is b.size\n  a_keys = a.keys()\n  b_keys = b.keys()\n  loop\n    { value: a_value, done: a_done, } = a_keys.next()\n    { value: b_value, done: b_done, } = b_keys.next()\n    break if a_done or b_done\n    return false unless CND.equals a_value, b_value\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"codec decodes private type with custom decoder (2)\" ] = ( T ) ->\n  value         = new Set 'qwert'\n  matcher       = [ value, ]\n  encoded_value = Array.from value\n  key           = [ { type: 'set', value: encoded_value, }, ]\n  key_bfr       = CODEC.encode key\n  #.........................................................................................................\n  decoded_key   = CODEC.decode key_bfr, ( type, value ) ->\n    return new Set value if type is 'set'\n    throw new Error \"unknown private type #{rpr type}\"\n  #.........................................................................................................\n  # debug CODEC.rpr_of_buffer key_bfr\n  # debug CODEC.decode key_bfr\n  # debug decoded_key\n  # debug matcher\n  T.ok @_sets_are_equal matcher[ 0 ], decoded_key[ 0 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Support for Sets\" ] = ( T ) ->\n  key           = [ ( new Set 'qwert' ), ]\n  matcher       = [ ( new Set 'qwert' ), ]\n  key_bfr       = CODEC.encode key\n  decoded_key   = CODEC.decode key_bfr\n  debug CODEC.rpr_of_buffer key_bfr\n  debug CODEC.decode key_bfr\n  debug decoded_key\n  debug matcher\n  T.ok @_sets_are_equal matcher[ 0 ], decoded_key[ 0 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_main = ->\n  test @, 'timeout': 2500\n\n\n\n\n\n\n\n"]}